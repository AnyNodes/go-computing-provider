// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package account

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CPAccountCpInfo is an auto generated low-level Go binding around an user-defined struct.
type CPAccountCpInfo struct {
	Owner          common.Address
	NodeId         string
	MultiAddresses []string
	Beneficiary    common.Address
	Worker         common.Address
	TaskTypes      []uint8
	Version        string
}

// AccountMetaData contains all meta data concerning the Account contract.
var AccountMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nodeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_multiAddresses\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_taskTypes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CPAccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"previousMultiaddrs\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"newMultiaddrs\",\"type\":\"string[]\"}],\"name\":\"MultiaddrsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"previousTaskTypes\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"newTaskTypes\",\"type\":\"uint8[]\"}],\"name\":\"TaskTypesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taskContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taskType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"UBIProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWorker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"WorkerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newMultiaddrs\",\"type\":\"string[]\"}],\"name\":\"changeMultiaddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"newTaskTypes\",\"type\":\"uint8[]\"}],\"name\":\"changeTaskTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"changeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"multiAddresses\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"taskTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"structCPAccount.CpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiAddresses\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiAddresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_taskType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_resourceType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"submitUBIProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taskTypes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"taskContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"taskType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSubmitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// AccountABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountMetaData.ABI instead.
var AccountABI = AccountMetaData.ABI

// AccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountMetaData.Bin instead.
var AccountBin = AccountMetaData.Bin

// DeployAccount deploys a new Ethereum contract, binding an instance of Account to it.
func DeployAccount(auth *bind.TransactOpts, backend bind.ContractBackend, _nodeId string, _multiAddresses []string, _beneficiary common.Address, _worker common.Address, _contractRegistryAddress common.Address, _taskTypes []uint8) (common.Address, *types.Transaction, *Account, error) {
	parsed, err := AccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountBin), backend, _nodeId, _multiAddresses, _beneficiary, _worker, _contractRegistryAddress, _taskTypes)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Account{AccountCaller: AccountCaller{contract: contract}, AccountTransactor: AccountTransactor{contract: contract}, AccountFilterer: AccountFilterer{contract: contract}}, nil
}

// Account is an auto generated Go binding around an Ethereum contract.
type Account struct {
	AccountCaller     // Read-only binding to the contract
	AccountTransactor // Write-only binding to the contract
	AccountFilterer   // Log filterer for contract events
}

// AccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountSession struct {
	Contract     *Account          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountCallerSession struct {
	Contract *AccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountTransactorSession struct {
	Contract     *AccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountRaw struct {
	Contract *Account // Generic contract binding to access the raw methods on
}

// AccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountCallerRaw struct {
	Contract *AccountCaller // Generic read-only contract binding to access the raw methods on
}

// AccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountTransactorRaw struct {
	Contract *AccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccount creates a new instance of Account, bound to a specific deployed contract.
func NewAccount(address common.Address, backend bind.ContractBackend) (*Account, error) {
	contract, err := bindAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Account{AccountCaller: AccountCaller{contract: contract}, AccountTransactor: AccountTransactor{contract: contract}, AccountFilterer: AccountFilterer{contract: contract}}, nil
}

// NewAccountCaller creates a new read-only instance of Account, bound to a specific deployed contract.
func NewAccountCaller(address common.Address, caller bind.ContractCaller) (*AccountCaller, error) {
	contract, err := bindAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountCaller{contract: contract}, nil
}

// NewAccountTransactor creates a new write-only instance of Account, bound to a specific deployed contract.
func NewAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountTransactor, error) {
	contract, err := bindAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountTransactor{contract: contract}, nil
}

// NewAccountFilterer creates a new log filterer instance of Account, bound to a specific deployed contract.
func NewAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountFilterer, error) {
	contract, err := bindAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountFilterer{contract: contract}, nil
}

// bindAccount binds a generic wrapper to an already deployed contract.
func bindAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Account *AccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Account.Contract.AccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Account *AccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Account.Contract.AccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Account *AccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Account.Contract.AccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Account *AccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Account.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Account *AccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Account.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Account *AccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Account.Contract.contract.Transact(opts, method, params...)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Account *AccountCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Account *AccountSession) VERSION() (string, error) {
	return _Account.Contract.VERSION(&_Account.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Account *AccountCallerSession) VERSION() (string, error) {
	return _Account.Contract.VERSION(&_Account.CallOpts)
}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountCaller) Beneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "beneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountSession) Beneficiary() (common.Address, error) {
	return _Account.Contract.Beneficiary(&_Account.CallOpts)
}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountCallerSession) Beneficiary() (common.Address, error) {
	return _Account.Contract.Beneficiary(&_Account.CallOpts)
}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountCaller) ContractRegistryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "contractRegistryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountSession) ContractRegistryAddress() (common.Address, error) {
	return _Account.Contract.ContractRegistryAddress(&_Account.CallOpts)
}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountCallerSession) ContractRegistryAddress() (common.Address, error) {
	return _Account.Contract.ContractRegistryAddress(&_Account.CallOpts)
}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns((address,string,string[],address,address,uint8[],string))
func (_Account *AccountCaller) GetAccount(opts *bind.CallOpts) (CPAccountCpInfo, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getAccount")

	if err != nil {
		return *new(CPAccountCpInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(CPAccountCpInfo)).(*CPAccountCpInfo)

	return out0, err

}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns((address,string,string[],address,address,uint8[],string))
func (_Account *AccountSession) GetAccount() (CPAccountCpInfo, error) {
	return _Account.Contract.GetAccount(&_Account.CallOpts)
}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns((address,string,string[],address,address,uint8[],string))
func (_Account *AccountCallerSession) GetAccount() (CPAccountCpInfo, error) {
	return _Account.Contract.GetAccount(&_Account.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountCaller) GetBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountSession) GetBeneficiary() (common.Address, error) {
	return _Account.Contract.GetBeneficiary(&_Account.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountCallerSession) GetBeneficiary() (common.Address, error) {
	return _Account.Contract.GetBeneficiary(&_Account.CallOpts)
}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountCaller) GetMultiAddresses(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getMultiAddresses")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountSession) GetMultiAddresses() ([]string, error) {
	return _Account.Contract.GetMultiAddresses(&_Account.CallOpts)
}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountCallerSession) GetMultiAddresses() ([]string, error) {
	return _Account.Contract.GetMultiAddresses(&_Account.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountSession) GetOwner() (common.Address, error) {
	return _Account.Contract.GetOwner(&_Account.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountCallerSession) GetOwner() (common.Address, error) {
	return _Account.Contract.GetOwner(&_Account.CallOpts)
}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountCaller) GetTaskTypes(opts *bind.CallOpts) ([]uint8, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getTaskTypes")

	if err != nil {
		return *new([]uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint8)).(*[]uint8)

	return out0, err

}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountSession) GetTaskTypes() ([]uint8, error) {
	return _Account.Contract.GetTaskTypes(&_Account.CallOpts)
}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountCallerSession) GetTaskTypes() ([]uint8, error) {
	return _Account.Contract.GetTaskTypes(&_Account.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_Account *AccountCaller) GetVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_Account *AccountSession) GetVersion() (string, error) {
	return _Account.Contract.GetVersion(&_Account.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_Account *AccountCallerSession) GetVersion() (string, error) {
	return _Account.Contract.GetVersion(&_Account.CallOpts)
}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountCaller) GetWorker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getWorker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountSession) GetWorker() (common.Address, error) {
	return _Account.Contract.GetWorker(&_Account.CallOpts)
}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountCallerSession) GetWorker() (common.Address, error) {
	return _Account.Contract.GetWorker(&_Account.CallOpts)
}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountCaller) MultiAddresses(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "multiAddresses", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountSession) MultiAddresses(arg0 *big.Int) (string, error) {
	return _Account.Contract.MultiAddresses(&_Account.CallOpts, arg0)
}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountCallerSession) MultiAddresses(arg0 *big.Int) (string, error) {
	return _Account.Contract.MultiAddresses(&_Account.CallOpts, arg0)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountCaller) NodeId(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountSession) NodeId() (string, error) {
	return _Account.Contract.NodeId(&_Account.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountCallerSession) NodeId() (string, error) {
	return _Account.Contract.NodeId(&_Account.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountSession) Owner() (common.Address, error) {
	return _Account.Contract.Owner(&_Account.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountCallerSession) Owner() (common.Address, error) {
	return _Account.Contract.Owner(&_Account.CallOpts)
}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountCaller) TaskTypes(opts *bind.CallOpts, arg0 *big.Int) (uint8, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "taskTypes", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountSession) TaskTypes(arg0 *big.Int) (uint8, error) {
	return _Account.Contract.TaskTypes(&_Account.CallOpts, arg0)
}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountCallerSession) TaskTypes(arg0 *big.Int) (uint8, error) {
	return _Account.Contract.TaskTypes(&_Account.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(address taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof, bool isSubmitted)
func (_Account *AccountCaller) Tasks(opts *bind.CallOpts, arg0 string) (struct {
	TaskContract common.Address
	TaskId       string
	TaskType     uint8
	ResourceType uint8
	Proof        string
	IsSubmitted  bool
}, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "tasks", arg0)

	outstruct := new(struct {
		TaskContract common.Address
		TaskId       string
		TaskType     uint8
		ResourceType uint8
		Proof        string
		IsSubmitted  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TaskContract = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TaskId = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.TaskType = *abi.ConvertType(out[2], new(uint8)).(*uint8)
	outstruct.ResourceType = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.Proof = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.IsSubmitted = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(address taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof, bool isSubmitted)
func (_Account *AccountSession) Tasks(arg0 string) (struct {
	TaskContract common.Address
	TaskId       string
	TaskType     uint8
	ResourceType uint8
	Proof        string
	IsSubmitted  bool
}, error) {
	return _Account.Contract.Tasks(&_Account.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(address taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof, bool isSubmitted)
func (_Account *AccountCallerSession) Tasks(arg0 string) (struct {
	TaskContract common.Address
	TaskId       string
	TaskType     uint8
	ResourceType uint8
	Proof        string
	IsSubmitted  bool
}, error) {
	return _Account.Contract.Tasks(&_Account.CallOpts, arg0)
}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountCaller) Worker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "worker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountSession) Worker() (common.Address, error) {
	return _Account.Contract.Worker(&_Account.CallOpts)
}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountCallerSession) Worker() (common.Address, error) {
	return _Account.Contract.Worker(&_Account.CallOpts)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountTransactor) ChangeBeneficiary(opts *bind.TransactOpts, newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeBeneficiary", newBeneficiary)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountSession) ChangeBeneficiary(newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeBeneficiary(&_Account.TransactOpts, newBeneficiary)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountTransactorSession) ChangeBeneficiary(newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeBeneficiary(&_Account.TransactOpts, newBeneficiary)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountTransactor) ChangeMultiaddrs(opts *bind.TransactOpts, newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeMultiaddrs", newMultiaddrs)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountSession) ChangeMultiaddrs(newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.Contract.ChangeMultiaddrs(&_Account.TransactOpts, newMultiaddrs)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountTransactorSession) ChangeMultiaddrs(newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.Contract.ChangeMultiaddrs(&_Account.TransactOpts, newMultiaddrs)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountTransactor) ChangeOwnerAddress(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeOwnerAddress", newOwner)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountSession) ChangeOwnerAddress(newOwner common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeOwnerAddress(&_Account.TransactOpts, newOwner)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountTransactorSession) ChangeOwnerAddress(newOwner common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeOwnerAddress(&_Account.TransactOpts, newOwner)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountTransactor) ChangeTaskTypes(opts *bind.TransactOpts, newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeTaskTypes", newTaskTypes)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountSession) ChangeTaskTypes(newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.Contract.ChangeTaskTypes(&_Account.TransactOpts, newTaskTypes)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountTransactorSession) ChangeTaskTypes(newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.Contract.ChangeTaskTypes(&_Account.TransactOpts, newTaskTypes)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountTransactor) ChangeWorker(opts *bind.TransactOpts, newWorker common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeWorker", newWorker)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountSession) ChangeWorker(newWorker common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeWorker(&_Account.TransactOpts, newWorker)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountTransactorSession) ChangeWorker(newWorker common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeWorker(&_Account.TransactOpts, newWorker)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x1a8552a8.
//
// Solidity: function submitUBIProof(address _taskContract, string _taskId, uint8 _taskType, uint8 _resourceType, string _proof) returns()
func (_Account *AccountTransactor) SubmitUBIProof(opts *bind.TransactOpts, _taskContract common.Address, _taskId string, _taskType uint8, _resourceType uint8, _proof string) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "submitUBIProof", _taskContract, _taskId, _taskType, _resourceType, _proof)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x1a8552a8.
//
// Solidity: function submitUBIProof(address _taskContract, string _taskId, uint8 _taskType, uint8 _resourceType, string _proof) returns()
func (_Account *AccountSession) SubmitUBIProof(_taskContract common.Address, _taskId string, _taskType uint8, _resourceType uint8, _proof string) (*types.Transaction, error) {
	return _Account.Contract.SubmitUBIProof(&_Account.TransactOpts, _taskContract, _taskId, _taskType, _resourceType, _proof)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x1a8552a8.
//
// Solidity: function submitUBIProof(address _taskContract, string _taskId, uint8 _taskType, uint8 _resourceType, string _proof) returns()
func (_Account *AccountTransactorSession) SubmitUBIProof(_taskContract common.Address, _taskId string, _taskType uint8, _resourceType uint8, _proof string) (*types.Transaction, error) {
	return _Account.Contract.SubmitUBIProof(&_Account.TransactOpts, _taskContract, _taskId, _taskType, _resourceType, _proof)
}

// AccountBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the Account contract.
type AccountBeneficiaryChangedIterator struct {
	Event *AccountBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountBeneficiaryChanged represents a BeneficiaryChanged event raised by the Account contract.
type AccountBeneficiaryChanged struct {
	PreviousBeneficiary common.Address
	NewBeneficiary      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed previousBeneficiary, address indexed newBeneficiary)
func (_Account *AccountFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, previousBeneficiary []common.Address, newBeneficiary []common.Address) (*AccountBeneficiaryChangedIterator, error) {

	var previousBeneficiaryRule []interface{}
	for _, previousBeneficiaryItem := range previousBeneficiary {
		previousBeneficiaryRule = append(previousBeneficiaryRule, previousBeneficiaryItem)
	}
	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "BeneficiaryChanged", previousBeneficiaryRule, newBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &AccountBeneficiaryChangedIterator{contract: _Account.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed previousBeneficiary, address indexed newBeneficiary)
func (_Account *AccountFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *AccountBeneficiaryChanged, previousBeneficiary []common.Address, newBeneficiary []common.Address) (event.Subscription, error) {

	var previousBeneficiaryRule []interface{}
	for _, previousBeneficiaryItem := range previousBeneficiary {
		previousBeneficiaryRule = append(previousBeneficiaryRule, previousBeneficiaryItem)
	}
	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "BeneficiaryChanged", previousBeneficiaryRule, newBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountBeneficiaryChanged)
				if err := _Account.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed previousBeneficiary, address indexed newBeneficiary)
func (_Account *AccountFilterer) ParseBeneficiaryChanged(log types.Log) (*AccountBeneficiaryChanged, error) {
	event := new(AccountBeneficiaryChanged)
	if err := _Account.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountCPAccountDeployedIterator is returned from FilterCPAccountDeployed and is used to iterate over the raw logs and unpacked data for CPAccountDeployed events raised by the Account contract.
type AccountCPAccountDeployedIterator struct {
	Event *AccountCPAccountDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountCPAccountDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountCPAccountDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountCPAccountDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountCPAccountDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountCPAccountDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountCPAccountDeployed represents a CPAccountDeployed event raised by the Account contract.
type AccountCPAccountDeployed struct {
	CpAccount common.Address
	Owner     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCPAccountDeployed is a free log retrieval operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) FilterCPAccountDeployed(opts *bind.FilterOpts, cpAccount []common.Address, owner []common.Address) (*AccountCPAccountDeployedIterator, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "CPAccountDeployed", cpAccountRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &AccountCPAccountDeployedIterator{contract: _Account.contract, event: "CPAccountDeployed", logs: logs, sub: sub}, nil
}

// WatchCPAccountDeployed is a free log subscription operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) WatchCPAccountDeployed(opts *bind.WatchOpts, sink chan<- *AccountCPAccountDeployed, cpAccount []common.Address, owner []common.Address) (event.Subscription, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "CPAccountDeployed", cpAccountRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountCPAccountDeployed)
				if err := _Account.contract.UnpackLog(event, "CPAccountDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCPAccountDeployed is a log parse operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) ParseCPAccountDeployed(log types.Log) (*AccountCPAccountDeployed, error) {
	event := new(AccountCPAccountDeployed)
	if err := _Account.contract.UnpackLog(event, "CPAccountDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountMultiaddrsChangedIterator is returned from FilterMultiaddrsChanged and is used to iterate over the raw logs and unpacked data for MultiaddrsChanged events raised by the Account contract.
type AccountMultiaddrsChangedIterator struct {
	Event *AccountMultiaddrsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountMultiaddrsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountMultiaddrsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountMultiaddrsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountMultiaddrsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountMultiaddrsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountMultiaddrsChanged represents a MultiaddrsChanged event raised by the Account contract.
type AccountMultiaddrsChanged struct {
	PreviousMultiaddrs []string
	NewMultiaddrs      []string
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterMultiaddrsChanged is a free log retrieval operation binding the contract event 0xf46e6230866af0a0c565afcd9620b4e3293bf51e538d30a8bc490c22fbe2cb68.
//
// Solidity: event MultiaddrsChanged(string[] previousMultiaddrs, string[] newMultiaddrs)
func (_Account *AccountFilterer) FilterMultiaddrsChanged(opts *bind.FilterOpts) (*AccountMultiaddrsChangedIterator, error) {

	logs, sub, err := _Account.contract.FilterLogs(opts, "MultiaddrsChanged")
	if err != nil {
		return nil, err
	}
	return &AccountMultiaddrsChangedIterator{contract: _Account.contract, event: "MultiaddrsChanged", logs: logs, sub: sub}, nil
}

// WatchMultiaddrsChanged is a free log subscription operation binding the contract event 0xf46e6230866af0a0c565afcd9620b4e3293bf51e538d30a8bc490c22fbe2cb68.
//
// Solidity: event MultiaddrsChanged(string[] previousMultiaddrs, string[] newMultiaddrs)
func (_Account *AccountFilterer) WatchMultiaddrsChanged(opts *bind.WatchOpts, sink chan<- *AccountMultiaddrsChanged) (event.Subscription, error) {

	logs, sub, err := _Account.contract.WatchLogs(opts, "MultiaddrsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountMultiaddrsChanged)
				if err := _Account.contract.UnpackLog(event, "MultiaddrsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultiaddrsChanged is a log parse operation binding the contract event 0xf46e6230866af0a0c565afcd9620b4e3293bf51e538d30a8bc490c22fbe2cb68.
//
// Solidity: event MultiaddrsChanged(string[] previousMultiaddrs, string[] newMultiaddrs)
func (_Account *AccountFilterer) ParseMultiaddrsChanged(log types.Log) (*AccountMultiaddrsChanged, error) {
	event := new(AccountMultiaddrsChanged)
	if err := _Account.contract.UnpackLog(event, "MultiaddrsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Account contract.
type AccountOwnershipTransferredIterator struct {
	Event *AccountOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountOwnershipTransferred represents a OwnershipTransferred event raised by the Account contract.
type AccountOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AccountOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AccountOwnershipTransferredIterator{contract: _Account.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AccountOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountOwnershipTransferred)
				if err := _Account.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) ParseOwnershipTransferred(log types.Log) (*AccountOwnershipTransferred, error) {
	event := new(AccountOwnershipTransferred)
	if err := _Account.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountTaskTypesChangedIterator is returned from FilterTaskTypesChanged and is used to iterate over the raw logs and unpacked data for TaskTypesChanged events raised by the Account contract.
type AccountTaskTypesChangedIterator struct {
	Event *AccountTaskTypesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountTaskTypesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountTaskTypesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountTaskTypesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountTaskTypesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountTaskTypesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountTaskTypesChanged represents a TaskTypesChanged event raised by the Account contract.
type AccountTaskTypesChanged struct {
	PreviousTaskTypes []uint8
	NewTaskTypes      []uint8
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTaskTypesChanged is a free log retrieval operation binding the contract event 0x1ba364eff72dfb6566951a55ff4e1fb9759951509955f0de52930c41c9b37c24.
//
// Solidity: event TaskTypesChanged(uint8[] previousTaskTypes, uint8[] newTaskTypes)
func (_Account *AccountFilterer) FilterTaskTypesChanged(opts *bind.FilterOpts) (*AccountTaskTypesChangedIterator, error) {

	logs, sub, err := _Account.contract.FilterLogs(opts, "TaskTypesChanged")
	if err != nil {
		return nil, err
	}
	return &AccountTaskTypesChangedIterator{contract: _Account.contract, event: "TaskTypesChanged", logs: logs, sub: sub}, nil
}

// WatchTaskTypesChanged is a free log subscription operation binding the contract event 0x1ba364eff72dfb6566951a55ff4e1fb9759951509955f0de52930c41c9b37c24.
//
// Solidity: event TaskTypesChanged(uint8[] previousTaskTypes, uint8[] newTaskTypes)
func (_Account *AccountFilterer) WatchTaskTypesChanged(opts *bind.WatchOpts, sink chan<- *AccountTaskTypesChanged) (event.Subscription, error) {

	logs, sub, err := _Account.contract.WatchLogs(opts, "TaskTypesChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountTaskTypesChanged)
				if err := _Account.contract.UnpackLog(event, "TaskTypesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskTypesChanged is a log parse operation binding the contract event 0x1ba364eff72dfb6566951a55ff4e1fb9759951509955f0de52930c41c9b37c24.
//
// Solidity: event TaskTypesChanged(uint8[] previousTaskTypes, uint8[] newTaskTypes)
func (_Account *AccountFilterer) ParseTaskTypesChanged(log types.Log) (*AccountTaskTypesChanged, error) {
	event := new(AccountTaskTypesChanged)
	if err := _Account.contract.UnpackLog(event, "TaskTypesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountUBIProofSubmittedIterator is returned from FilterUBIProofSubmitted and is used to iterate over the raw logs and unpacked data for UBIProofSubmitted events raised by the Account contract.
type AccountUBIProofSubmittedIterator struct {
	Event *AccountUBIProofSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountUBIProofSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountUBIProofSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountUBIProofSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountUBIProofSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountUBIProofSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountUBIProofSubmitted represents a UBIProofSubmitted event raised by the Account contract.
type AccountUBIProofSubmitted struct {
	Submitter    common.Address
	TaskContract common.Address
	TaskId       string
	TaskType     uint8
	ResourceType uint8
	Proof        string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUBIProofSubmitted is a free log retrieval operation binding the contract event 0x64546653362ae9bcd88a615f6e66083618b5d1c395401ecd81887a451b26f153.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, address indexed taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof)
func (_Account *AccountFilterer) FilterUBIProofSubmitted(opts *bind.FilterOpts, submitter []common.Address, taskContract []common.Address) (*AccountUBIProofSubmittedIterator, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var taskContractRule []interface{}
	for _, taskContractItem := range taskContract {
		taskContractRule = append(taskContractRule, taskContractItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "UBIProofSubmitted", submitterRule, taskContractRule)
	if err != nil {
		return nil, err
	}
	return &AccountUBIProofSubmittedIterator{contract: _Account.contract, event: "UBIProofSubmitted", logs: logs, sub: sub}, nil
}

// WatchUBIProofSubmitted is a free log subscription operation binding the contract event 0x64546653362ae9bcd88a615f6e66083618b5d1c395401ecd81887a451b26f153.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, address indexed taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof)
func (_Account *AccountFilterer) WatchUBIProofSubmitted(opts *bind.WatchOpts, sink chan<- *AccountUBIProofSubmitted, submitter []common.Address, taskContract []common.Address) (event.Subscription, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var taskContractRule []interface{}
	for _, taskContractItem := range taskContract {
		taskContractRule = append(taskContractRule, taskContractItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "UBIProofSubmitted", submitterRule, taskContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountUBIProofSubmitted)
				if err := _Account.contract.UnpackLog(event, "UBIProofSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUBIProofSubmitted is a log parse operation binding the contract event 0x64546653362ae9bcd88a615f6e66083618b5d1c395401ecd81887a451b26f153.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, address indexed taskContract, string taskId, uint8 taskType, uint8 resourceType, string proof)
func (_Account *AccountFilterer) ParseUBIProofSubmitted(log types.Log) (*AccountUBIProofSubmitted, error) {
	event := new(AccountUBIProofSubmitted)
	if err := _Account.contract.UnpackLog(event, "UBIProofSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountWorkerChangedIterator is returned from FilterWorkerChanged and is used to iterate over the raw logs and unpacked data for WorkerChanged events raised by the Account contract.
type AccountWorkerChangedIterator struct {
	Event *AccountWorkerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountWorkerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountWorkerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountWorkerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountWorkerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountWorkerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountWorkerChanged represents a WorkerChanged event raised by the Account contract.
type AccountWorkerChanged struct {
	PreviousWorker common.Address
	NewWorker      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWorkerChanged is a free log retrieval operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) FilterWorkerChanged(opts *bind.FilterOpts, previousWorker []common.Address, newWorker []common.Address) (*AccountWorkerChangedIterator, error) {

	var previousWorkerRule []interface{}
	for _, previousWorkerItem := range previousWorker {
		previousWorkerRule = append(previousWorkerRule, previousWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "WorkerChanged", previousWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return &AccountWorkerChangedIterator{contract: _Account.contract, event: "WorkerChanged", logs: logs, sub: sub}, nil
}

// WatchWorkerChanged is a free log subscription operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) WatchWorkerChanged(opts *bind.WatchOpts, sink chan<- *AccountWorkerChanged, previousWorker []common.Address, newWorker []common.Address) (event.Subscription, error) {

	var previousWorkerRule []interface{}
	for _, previousWorkerItem := range previousWorker {
		previousWorkerRule = append(previousWorkerRule, previousWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "WorkerChanged", previousWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountWorkerChanged)
				if err := _Account.contract.UnpackLog(event, "WorkerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkerChanged is a log parse operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) ParseWorkerChanged(log types.Log) (*AccountWorkerChanged, error) {
	event := new(AccountWorkerChanged)
	if err := _Account.contract.UnpackLog(event, "WorkerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
