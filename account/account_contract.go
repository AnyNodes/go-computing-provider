// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package account

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AccountMetaData contains all meta data concerning the Account contract.
var AccountMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nodeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_multiAddresses\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_taskTypes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CPAccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"newMultiaddrs\",\"type\":\"string[]\"}],\"name\":\"MultiaddrsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"newTaskTypes\",\"type\":\"uint8[]\"}],\"name\":\"TaskTypesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taskType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"UBIProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWorker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"WorkerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newMultiaddrs\",\"type\":\"string[]\"}],\"name\":\"changeMultiaddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"newTaskTypes\",\"type\":\"uint8[]\"}],\"name\":\"changeTaskTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"changeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiAddresses\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiAddresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_taskId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_taskType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"submitUBIProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taskTypes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"taskId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"taskType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSubmitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b506040516200339d3803806200339d83398181016040528101906200003691906200090e565b3360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856003908162000087919062000c3a565b508460049080519060200190620000a092919062000394565b508360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806006908051906020019062000178929190620003f2565b50620001896200021060201b60201c565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b560405160405180910390a350505050505062000e60565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516024016200027e92919062000d2f565b6040516020818303038152906040527fb1422e7b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516200030a919062000da4565b5f604051808303815f865af19150503d805f811462000345576040519150601f19603f3d011682016040523d82523d5f602084013e6200034a565b606091505b505090508062000391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003889062000e40565b60405180910390fd5b50565b828054828255905f5260205f20908101928215620003df579160200282015b82811115620003de578251829081620003cd919062000c3a565b5091602001919060010190620003b3565b5b509050620003ee91906200049b565b5090565b828054828255905f5260205f2090601f0160209004810192821562000488579160200282015f5b838211156200045857835183826101000a81548160ff021916908360ff16021790555092602001926001016020815f0104928301926001030262000419565b8015620004865782816101000a81549060ff02191690556001016020815f0104928301926001030262000458565b505b509050620004979190620004c2565b5090565b5b80821115620004be575f8181620004b49190620004df565b506001016200049c565b5090565b5b80821115620004db575f815f905550600101620004c3565b5090565b508054620004ed9062000a3a565b5f825580601f106200050057506200051f565b601f0160209004905f5260205f20908101906200051e9190620004c2565b5b50565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62000583826200053b565b810181811067ffffffffffffffff82111715620005a557620005a46200054b565b5b80604052505050565b5f620005b962000522565b9050620005c7828262000578565b919050565b5f67ffffffffffffffff821115620005e957620005e86200054b565b5b620005f4826200053b565b9050602081019050919050565b5f5b838110156200062057808201518184015260208101905062000603565b5f8484015250505050565b5f620006416200063b84620005cc565b620005ae565b90508281526020810184848401111562000660576200065f62000537565b5b6200066d84828562000601565b509392505050565b5f82601f8301126200068c576200068b62000533565b5b81516200069e8482602086016200062b565b91505092915050565b5f67ffffffffffffffff821115620006c457620006c36200054b565b5b602082029050602081019050919050565b5f80fd5b5f620006ef620006e984620006a7565b620005ae565b90508083825260208201905060208402830185811115620007155762000714620006d5565b5b835b818110156200076357805167ffffffffffffffff8111156200073e576200073d62000533565b5b8086016200074d898262000675565b8552602085019450505060208101905062000717565b5050509392505050565b5f82601f83011262000784576200078362000533565b5b815162000796848260208601620006d9565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620007ca826200079f565b9050919050565b620007dc81620007be565b8114620007e7575f80fd5b50565b5f81519050620007fa81620007d1565b92915050565b5f67ffffffffffffffff8211156200081d576200081c6200054b565b5b602082029050602081019050919050565b5f60ff82169050919050565b62000845816200082e565b811462000850575f80fd5b50565b5f8151905062000863816200083a565b92915050565b5f6200087f620008798462000800565b620005ae565b90508083825260208201905060208402830185811115620008a557620008a4620006d5565b5b835b81811015620008d25780620008bd888262000853565b845260208401935050602081019050620008a7565b5050509392505050565b5f82601f830112620008f357620008f262000533565b5b81516200090584826020860162000869565b91505092915050565b5f805f805f8060c087890312156200092b576200092a6200052b565b5b5f87015167ffffffffffffffff8111156200094b576200094a6200052f565b5b6200095989828a0162000675565b965050602087015167ffffffffffffffff8111156200097d576200097c6200052f565b5b6200098b89828a016200076d565b95505060406200099e89828a01620007ea565b9450506060620009b189828a01620007ea565b9350506080620009c489828a01620007ea565b92505060a087015167ffffffffffffffff811115620009e857620009e76200052f565b5b620009f689828a01620008dc565b9150509295509295509295565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168062000a5257607f821691505b60208210810362000a685762000a6762000a0d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830262000acc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000a8f565b62000ad8868362000a8f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f62000b2262000b1c62000b168462000af0565b62000af9565b62000af0565b9050919050565b5f819050919050565b62000b3d8362000b02565b62000b5562000b4c8262000b29565b84845462000a9b565b825550505050565b5f90565b62000b6b62000b5d565b62000b7881848462000b32565b505050565b5b8181101562000b9f5762000b935f8262000b61565b60018101905062000b7e565b5050565b601f82111562000bee5762000bb88162000a6e565b62000bc38462000a80565b8101602085101562000bd3578190505b62000beb62000be28562000a80565b83018262000b7d565b50505b505050565b5f82821c905092915050565b5f62000c105f198460080262000bf3565b1980831691505092915050565b5f62000c2a838362000bff565b9150826002028217905092915050565b62000c458262000a03565b67ffffffffffffffff81111562000c615762000c606200054b565b5b62000c6d825462000a3a565b62000c7a82828562000ba3565b5f60209050601f83116001811462000cb0575f841562000c9b578287015190505b62000ca7858262000c1d565b86555062000d16565b601f19841662000cc08662000a6e565b5f5b8281101562000ce95784890151825560018201915060208501945060208101905062000cc2565b8683101562000d09578489015162000d05601f89168262000bff565b8355505b6001600288020188555050505b505050505050565b62000d2981620007be565b82525050565b5f60408201905062000d445f83018562000d1e565b62000d53602083018462000d1e565b9392505050565b5f81519050919050565b5f81905092915050565b5f62000d7a8262000d5a565b62000d86818562000d64565b935062000d9881856020860162000601565b80840191505092915050565b5f62000db1828462000d6e565b915081905092915050565b5f82825260208201905092915050565b7f4661696c656420746f207265676973746572204350436f6e747261637420746f5f8201527f20436f6e74726163745265676973747279000000000000000000000000000000602082015250565b5f62000e2860318362000dbc565b915062000e358262000dcc565b604082019050919050565b5f6020820190508181035f83015262000e598162000e1a565b9050919050565b61252f8062000e6e5f395ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c80635ded591b116100ab578063893d20e81161006f578063893d20e8146103215780638da5cb5b1461033f57806394f219381461035d578063db613e8114610379578063dc0706571461039c5761012a565b80635ded591b1461029157806367d6c957146102ad57806367eaeddb146102cb5780637ef71fd0146102e957806385eac05f146103055761012a565b80633d1333a5116100f25780633d1333a5146101d457806346af6070146102045780634d547ada14610222578063565a2e2c1461024057806358709cf21461025e5761012a565b8063046937e91461012e57806310190ef11461014c578063139d7fed1461017c5780631dcdd4e31461019a57806338af3eed146101b6575b5f80fd5b6101366103b8565b6040516101439190611701565b60405180910390f35b61016660048036038101906101619190611765565b61048c565b60405161017391906117ab565b60405180910390f35b6101846104bd565b604051610191919061180c565b60405180910390f35b6101b460048036038101906101af9190611996565b610549565b005b6101be610629565b6040516101cb9190611a1c565b60405180910390f35b6101ee60048036038101906101e99190611765565b61064e565b6040516101fb919061180c565b60405180910390f35b61020c6106f4565b6040516102199190611a1c565b60405180910390f35b61022a610717565b6040516102379190611a1c565b60405180910390f35b61024861073c565b6040516102559190611a1c565b60405180910390f35b61027860048036038101906102739190611ae5565b610764565b6040516102889493929190611b46565b60405180910390f35b6102ab60048036038101906102a69190611b97565b6108cc565b005b6102b5610b28565b6040516102c29190611cd6565b60405180910390f35b6102d3610ba2565b6040516102e09190611a1c565b60405180910390f35b61030360048036038101906102fe9190611d20565b610bca565b005b61031f600480360381019061031a9190611d20565b610d17565b005b610329610f9b565b6040516103369190611a1c565b60405180910390f35b610347610fc3565b6040516103549190611a1c565b60405180910390f35b61037760048036038101906103729190611e29565b610fe8565b005b6103816110c8565b60405161039396959493929190611e70565b60405180910390f35b6103b660048036038101906103b19190611d20565b61131c565b005b60606004805480602002602001604051908101604052809291908181526020015f905b82821015610483578382905f5260205f200180546103f890611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461042490611f11565b801561046f5780601f106104465761010080835404028352916020019161046f565b820191905f5260205f20905b81548152906001019060200180831161045257829003601f168201915b5050505050815260200190600101906103db565b50505050905090565b6006818154811061049b575f80fd5b905f5260205f209060209182820401919006915054906101000a900460ff1681565b600380546104ca90611f11565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611f11565b80156105415780601f1061051857610100808354040283529160200191610541565b820191905f5260205f20905b81548152906001019060200180831161052457829003601f168201915b505050505081565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90611fb1565b60405180910390fd5b80600690805190602001906105ee929190611448565b507f8d73e7eaae1ba475a7760838d69c6b77ac133a5e1f086b6f08e87dbc2a5aedf78160405161061e9190611cd6565b60405180910390a150565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061065d575f80fd5b905f5260205f20015f91509050805461067590611f11565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190611f11565b80156106ec5780601f106106c3576101008083540402835291602001916106ec565b820191905f5260205f20905b8154815290600101906020018083116106cf57829003601f168201915b505050505081565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6007818051602081018201805184825260208301602085012081835280955050505050505f91509050805f01805461079b90611f11565b80601f01602080910402602001604051908101604052809291908181526020018280546107c790611f11565b80156108125780601f106107e957610100808354040283529160200191610812565b820191905f5260205f20905b8154815290600101906020018083116107f557829003601f168201915b505050505090806001015f9054906101000a900460ff169080600201805461083990611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461086590611f11565b80156108b05780601f10610887576101008083540402835291602001916108b0565b820191905f5260205f20905b81548152906001019060200180831161089357829003601f168201915b505050505090806003015f9054906101000a900460ff16905084565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610973575060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a99061203f565b60405180910390fd5b6007836040516109c29190612097565b90815260200160405180910390206003015f9054906101000a900460ff1615610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a179061211d565b60405180910390fd5b60405180608001604052808481526020018360ff16815260200182815260200160011515815250600784604051610a579190612097565b90815260200160405180910390205f820151815f019081610a7891906122d8565b506020820151816001015f6101000a81548160ff021916908360ff1602179055506040820151816002019081610aae91906122d8565b506060820151816003015f6101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167fb0932b4b506d9cd3385a587fac2523cba482adf0fb97fac3bba18f9becd79c5f848484604051610b1b939291906123a7565b60405180910390a2505050565b60606006805480602002602001604051908101604052809291908181526020018280548015610b9857602002820191905f5260205f20905f905b82829054906101000a900460ff1660ff16815260200190600101906020825f01049283019260010382029150808411610b625790505b5050505050905090565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5090611fb1565b60405180910390fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd93260405160405180910390a350565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90611fb1565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163083604051602401610e8b9291906123ea565b6040516020818303038152906040527ff00d4b5d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f159190612455565b5f604051808303815f865af19150503d805f8114610f4e576040519150601f19603f3d011682016040523d82523d5f602084013e610f53565b606091505b5050905080610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e906124db565b60405180910390fd5b5050565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e90611fb1565b60405180910390fd5b806004908051906020019061108d9291906114ea565b507f34f0cbd777d8d394caa00ae618bb83ee053819e2943bbd10c6c61019d4c57582816040516110bd9190611701565b60405180910390a150565b5f8060608060605f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036004600660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683805461114890611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461117490611f11565b80156111bf5780601f10611196576101008083540402835291602001916111bf565b820191905f5260205f20905b8154815290600101906020018083116111a257829003601f168201915b5050505050935082805480602002602001604051908101604052809291908181526020015f905b8282101561128e578382905f5260205f2001805461120390611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461122f90611f11565b801561127a5780601f106112515761010080835404028352916020019161127a565b820191905f5260205f20905b81548152906001019060200180831161125d57829003601f168201915b5050505050815260200190600101906111e6565b5050505092508180548060200260200160405190810160405280929190818152602001828054801561130157602002820191905f5260205f20905f905b82829054906101000a900460ff1660ff16815260200190600101906020825f010492830192600103820291508084116112cb5790505b50505050509150955095509550955095509550909192939495565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290611fb1565b60405180910390fd5b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161143d9291906123ea565b60405180910390a150565b828054828255905f5260205f2090601f016020900481019282156114d9579160200282015f5b838211156114ab57835183826101000a81548160ff021916908360ff16021790555092602001926001016020815f0104928301926001030261146e565b80156114d75782816101000a81549060ff02191690556001016020815f010492830192600103026114ab565b505b5090506114e69190611541565b5090565b828054828255905f5260205f20908101928215611530579160200282015b8281111561152f57825182908161151f91906122d8565b5091602001919060010190611508565b5b50905061153d919061155c565b5090565b5b80821115611558575f815f905550600101611542565b5090565b5b8082111561157b575f8181611572919061157f565b5060010161155d565b5090565b50805461158b90611f11565b5f825580601f1061159c57506115b9565b601f0160209004905f5260205f20908101906115b89190611541565b5b50565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561161c578082015181840152602081019050611601565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611641826115e5565b61164b81856115ef565b935061165b8185602086016115ff565b61166481611627565b840191505092915050565b5f61167a8383611637565b905092915050565b5f602082019050919050565b5f611698826115bc565b6116a281856115c6565b9350836020820285016116b4856115d6565b805f5b858110156116ef57848403895281516116d0858261166f565b94506116db83611682565b925060208a019950506001810190506116b7565b50829750879550505050505092915050565b5f6020820190508181035f830152611719818461168e565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61174481611732565b811461174e575f80fd5b50565b5f8135905061175f8161173b565b92915050565b5f6020828403121561177a5761177961172a565b5b5f61178784828501611751565b91505092915050565b5f60ff82169050919050565b6117a581611790565b82525050565b5f6020820190506117be5f83018461179c565b92915050565b5f82825260208201905092915050565b5f6117de826115e5565b6117e881856117c4565b93506117f88185602086016115ff565b61180181611627565b840191505092915050565b5f6020820190508181035f83015261182481846117d4565b905092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61186682611627565b810181811067ffffffffffffffff8211171561188557611884611830565b5b80604052505050565b5f611897611721565b90506118a3828261185d565b919050565b5f67ffffffffffffffff8211156118c2576118c1611830565b5b602082029050602081019050919050565b5f80fd5b6118e081611790565b81146118ea575f80fd5b50565b5f813590506118fb816118d7565b92915050565b5f61191361190e846118a8565b61188e565b90508083825260208201905060208402830185811115611936576119356118d3565b5b835b8181101561195f578061194b88826118ed565b845260208401935050602081019050611938565b5050509392505050565b5f82601f83011261197d5761197c61182c565b5b813561198d848260208601611901565b91505092915050565b5f602082840312156119ab576119aa61172a565b5b5f82013567ffffffffffffffff8111156119c8576119c761172e565b5b6119d484828501611969565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a06826119dd565b9050919050565b611a16816119fc565b82525050565b5f602082019050611a2f5f830184611a0d565b92915050565b5f80fd5b5f67ffffffffffffffff821115611a5357611a52611830565b5b611a5c82611627565b9050602081019050919050565b828183375f83830152505050565b5f611a89611a8484611a39565b61188e565b905082815260208101848484011115611aa557611aa4611a35565b5b611ab0848285611a69565b509392505050565b5f82601f830112611acc57611acb61182c565b5b8135611adc848260208601611a77565b91505092915050565b5f60208284031215611afa57611af961172a565b5b5f82013567ffffffffffffffff811115611b1757611b1661172e565b5b611b2384828501611ab8565b91505092915050565b5f8115159050919050565b611b4081611b2c565b82525050565b5f6080820190508181035f830152611b5e81876117d4565b9050611b6d602083018661179c565b8181036040830152611b7f81856117d4565b9050611b8e6060830184611b37565b95945050505050565b5f805f60608486031215611bae57611bad61172a565b5b5f84013567ffffffffffffffff811115611bcb57611bca61172e565b5b611bd786828701611ab8565b9350506020611be8868287016118ed565b925050604084013567ffffffffffffffff811115611c0957611c0861172e565b5b611c1586828701611ab8565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611c5181611790565b82525050565b5f611c628383611c48565b60208301905092915050565b5f602082019050919050565b5f611c8482611c1f565b611c8e8185611c29565b9350611c9983611c39565b805f5b83811015611cc9578151611cb08882611c57565b9750611cbb83611c6e565b925050600181019050611c9c565b5085935050505092915050565b5f6020820190508181035f830152611cee8184611c7a565b905092915050565b611cff816119fc565b8114611d09575f80fd5b50565b5f81359050611d1a81611cf6565b92915050565b5f60208284031215611d3557611d3461172a565b5b5f611d4284828501611d0c565b91505092915050565b5f67ffffffffffffffff821115611d6557611d64611830565b5b602082029050602081019050919050565b5f611d88611d8384611d4b565b61188e565b90508083825260208201905060208402830185811115611dab57611daa6118d3565b5b835b81811015611df257803567ffffffffffffffff811115611dd057611dcf61182c565b5b808601611ddd8982611ab8565b85526020850194505050602081019050611dad565b5050509392505050565b5f82601f830112611e1057611e0f61182c565b5b8135611e20848260208601611d76565b91505092915050565b5f60208284031215611e3e57611e3d61172a565b5b5f82013567ffffffffffffffff811115611e5b57611e5a61172e565b5b611e6784828501611dfc565b91505092915050565b5f60c082019050611e835f830189611a0d565b611e906020830188611a0d565b8181036040830152611ea281876117d4565b90508181036060830152611eb6818661168e565b90508181036080830152611eca8185611c7a565b9050611ed960a0830184611a0d565b979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f2857607f821691505b602082108103611f3b57611f3a611ee4565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b5f611f9b6022836117c4565b9150611fa682611f41565b604082019050919050565b5f6020820190508181035f830152611fc881611f8f565b9050919050565b7f6f776e657220616e6420776f726b65722063616e2063616c6c207468697320665f8201527f756e6374696f6e2e000000000000000000000000000000000000000000000000602082015250565b5f6120296028836117c4565b915061203482611fcf565b604082019050919050565b5f6020820190508181035f8301526120568161201d565b9050919050565b5f81905092915050565b5f612071826115e5565b61207b818561205d565b935061208b8185602086016115ff565b80840191505092915050565b5f6120a28284612067565b915081905092915050565b7f50726f6f6620666f722074686973207461736b20697320616c726561647920735f8201527f75626d69747465642e0000000000000000000000000000000000000000000000602082015250565b5f6121076029836117c4565b9150612112826120ad565b604082019050919050565b5f6020820190508181035f830152612134816120fb565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026121977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261215c565b6121a1868361215c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6121dc6121d76121d284611732565b6121b9565b611732565b9050919050565b5f819050919050565b6121f5836121c2565b612209612201826121e3565b848454612168565b825550505050565b5f90565b61221d612211565b6122288184846121ec565b505050565b5b8181101561224b576122405f82612215565b60018101905061222e565b5050565b601f821115612290576122618161213b565b61226a8461214d565b81016020851015612279578190505b61228d6122858561214d565b83018261222d565b50505b505050565b5f82821c905092915050565b5f6122b05f1984600802612295565b1980831691505092915050565b5f6122c883836122a1565b9150826002028217905092915050565b6122e1826115e5565b67ffffffffffffffff8111156122fa576122f9611830565b5b6123048254611f11565b61230f82828561224f565b5f60209050601f831160018114612340575f841561232e578287015190505b61233885826122bd565b86555061239f565b601f19841661234e8661213b565b5f5b8281101561237557848901518255600182019150602085019450602081019050612350565b86831015612392578489015161238e601f8916826122a1565b8355505b6001600288020188555050505b505050505050565b5f6060820190508181035f8301526123bf81866117d4565b90506123ce602083018561179c565b81810360408301526123e081846117d4565b9050949350505050565b5f6040820190506123fd5f830185611a0d565b61240a6020830184611a0d565b9392505050565b5f81519050919050565b5f81905092915050565b5f61242f82612411565b612439818561241b565b93506124498185602086016115ff565b80840191505092915050565b5f6124608284612425565b915081905092915050565b7f4661696c656420746f206368616e6765206f776e657220696e20436f6e7472615f8201527f6374526567697374727900000000000000000000000000000000000000000000602082015250565b5f6124c5602a836117c4565b91506124d08261246b565b604082019050919050565b5f6020820190508181035f8301526124f2816124b9565b905091905056fea26469706673582212206eb25122fc0c16bc2580bf1a5922f3d6c99ff430937e1d523e0265dda517394364736f6c63430008140033",
}

// AccountABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountMetaData.ABI instead.
var AccountABI = AccountMetaData.ABI

// AccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountMetaData.Bin instead.
var AccountBin = AccountMetaData.Bin

// DeployAccount deploys a new Ethereum contract, binding an instance of Account to it.
func DeployAccount(auth *bind.TransactOpts, backend bind.ContractBackend, _nodeId string, _multiAddresses []string, _beneficiary common.Address, _worker common.Address, _contractRegistryAddress common.Address, _taskTypes []uint8) (common.Address, *types.Transaction, *Account, error) {
	parsed, err := AccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountBin), backend, _nodeId, _multiAddresses, _beneficiary, _worker, _contractRegistryAddress, _taskTypes)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Account{AccountCaller: AccountCaller{contract: contract}, AccountTransactor: AccountTransactor{contract: contract}, AccountFilterer: AccountFilterer{contract: contract}}, nil
}

// Account is an auto generated Go binding around an Ethereum contract.
type Account struct {
	AccountCaller     // Read-only binding to the contract
	AccountTransactor // Write-only binding to the contract
	AccountFilterer   // Log filterer for contract events
}

// AccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountSession struct {
	Contract     *Account          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountCallerSession struct {
	Contract *AccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountTransactorSession struct {
	Contract     *AccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountRaw struct {
	Contract *Account // Generic contract binding to access the raw methods on
}

// AccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountCallerRaw struct {
	Contract *AccountCaller // Generic read-only contract binding to access the raw methods on
}

// AccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountTransactorRaw struct {
	Contract *AccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccount creates a new instance of Account, bound to a specific deployed contract.
func NewAccount(address common.Address, backend bind.ContractBackend) (*Account, error) {
	contract, err := bindAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Account{AccountCaller: AccountCaller{contract: contract}, AccountTransactor: AccountTransactor{contract: contract}, AccountFilterer: AccountFilterer{contract: contract}}, nil
}

// NewAccountCaller creates a new read-only instance of Account, bound to a specific deployed contract.
func NewAccountCaller(address common.Address, caller bind.ContractCaller) (*AccountCaller, error) {
	contract, err := bindAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountCaller{contract: contract}, nil
}

// NewAccountTransactor creates a new write-only instance of Account, bound to a specific deployed contract.
func NewAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountTransactor, error) {
	contract, err := bindAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountTransactor{contract: contract}, nil
}

// NewAccountFilterer creates a new log filterer instance of Account, bound to a specific deployed contract.
func NewAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountFilterer, error) {
	contract, err := bindAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountFilterer{contract: contract}, nil
}

// bindAccount binds a generic wrapper to an already deployed contract.
func bindAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Account *AccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Account.Contract.AccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Account *AccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Account.Contract.AccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Account *AccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Account.Contract.AccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Account *AccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Account.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Account *AccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Account.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Account *AccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Account.Contract.contract.Transact(opts, method, params...)
}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountCaller) Beneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "beneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountSession) Beneficiary() (common.Address, error) {
	return _Account.Contract.Beneficiary(&_Account.CallOpts)
}

// Beneficiary is a free data retrieval call binding the contract method 0x38af3eed.
//
// Solidity: function beneficiary() view returns(address)
func (_Account *AccountCallerSession) Beneficiary() (common.Address, error) {
	return _Account.Contract.Beneficiary(&_Account.CallOpts)
}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountCaller) ContractRegistryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "contractRegistryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountSession) ContractRegistryAddress() (common.Address, error) {
	return _Account.Contract.ContractRegistryAddress(&_Account.CallOpts)
}

// ContractRegistryAddress is a free data retrieval call binding the contract method 0x46af6070.
//
// Solidity: function contractRegistryAddress() view returns(address)
func (_Account *AccountCallerSession) ContractRegistryAddress() (common.Address, error) {
	return _Account.Contract.ContractRegistryAddress(&_Account.CallOpts)
}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns(address, address, string, string[], uint8[], address)
func (_Account *AccountCaller) GetAccount(opts *bind.CallOpts) (common.Address, common.Address, string, []string, []uint8, common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getAccount")

	if err != nil {
		return *new(common.Address), *new(common.Address), *new(string), *new([]string), *new([]uint8), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(string)).(*string)
	out3 := *abi.ConvertType(out[3], new([]string)).(*[]string)
	out4 := *abi.ConvertType(out[4], new([]uint8)).(*[]uint8)
	out5 := *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return out0, out1, out2, out3, out4, out5, err

}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns(address, address, string, string[], uint8[], address)
func (_Account *AccountSession) GetAccount() (common.Address, common.Address, string, []string, []uint8, common.Address, error) {
	return _Account.Contract.GetAccount(&_Account.CallOpts)
}

// GetAccount is a free data retrieval call binding the contract method 0xdb613e81.
//
// Solidity: function getAccount() view returns(address, address, string, string[], uint8[], address)
func (_Account *AccountCallerSession) GetAccount() (common.Address, common.Address, string, []string, []uint8, common.Address, error) {
	return _Account.Contract.GetAccount(&_Account.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountCaller) GetBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountSession) GetBeneficiary() (common.Address, error) {
	return _Account.Contract.GetBeneficiary(&_Account.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_Account *AccountCallerSession) GetBeneficiary() (common.Address, error) {
	return _Account.Contract.GetBeneficiary(&_Account.CallOpts)
}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountCaller) GetMultiAddresses(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getMultiAddresses")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountSession) GetMultiAddresses() ([]string, error) {
	return _Account.Contract.GetMultiAddresses(&_Account.CallOpts)
}

// GetMultiAddresses is a free data retrieval call binding the contract method 0x046937e9.
//
// Solidity: function getMultiAddresses() view returns(string[])
func (_Account *AccountCallerSession) GetMultiAddresses() ([]string, error) {
	return _Account.Contract.GetMultiAddresses(&_Account.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountSession) GetOwner() (common.Address, error) {
	return _Account.Contract.GetOwner(&_Account.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Account *AccountCallerSession) GetOwner() (common.Address, error) {
	return _Account.Contract.GetOwner(&_Account.CallOpts)
}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountCaller) GetTaskTypes(opts *bind.CallOpts) ([]uint8, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getTaskTypes")

	if err != nil {
		return *new([]uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint8)).(*[]uint8)

	return out0, err

}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountSession) GetTaskTypes() ([]uint8, error) {
	return _Account.Contract.GetTaskTypes(&_Account.CallOpts)
}

// GetTaskTypes is a free data retrieval call binding the contract method 0x67d6c957.
//
// Solidity: function getTaskTypes() view returns(uint8[])
func (_Account *AccountCallerSession) GetTaskTypes() ([]uint8, error) {
	return _Account.Contract.GetTaskTypes(&_Account.CallOpts)
}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountCaller) GetWorker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "getWorker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountSession) GetWorker() (common.Address, error) {
	return _Account.Contract.GetWorker(&_Account.CallOpts)
}

// GetWorker is a free data retrieval call binding the contract method 0x67eaeddb.
//
// Solidity: function getWorker() view returns(address)
func (_Account *AccountCallerSession) GetWorker() (common.Address, error) {
	return _Account.Contract.GetWorker(&_Account.CallOpts)
}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountCaller) MultiAddresses(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "multiAddresses", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountSession) MultiAddresses(arg0 *big.Int) (string, error) {
	return _Account.Contract.MultiAddresses(&_Account.CallOpts, arg0)
}

// MultiAddresses is a free data retrieval call binding the contract method 0x3d1333a5.
//
// Solidity: function multiAddresses(uint256 ) view returns(string)
func (_Account *AccountCallerSession) MultiAddresses(arg0 *big.Int) (string, error) {
	return _Account.Contract.MultiAddresses(&_Account.CallOpts, arg0)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountCaller) NodeId(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountSession) NodeId() (string, error) {
	return _Account.Contract.NodeId(&_Account.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(string)
func (_Account *AccountCallerSession) NodeId() (string, error) {
	return _Account.Contract.NodeId(&_Account.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountSession) Owner() (common.Address, error) {
	return _Account.Contract.Owner(&_Account.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Account *AccountCallerSession) Owner() (common.Address, error) {
	return _Account.Contract.Owner(&_Account.CallOpts)
}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountCaller) TaskTypes(opts *bind.CallOpts, arg0 *big.Int) (uint8, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "taskTypes", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountSession) TaskTypes(arg0 *big.Int) (uint8, error) {
	return _Account.Contract.TaskTypes(&_Account.CallOpts, arg0)
}

// TaskTypes is a free data retrieval call binding the contract method 0x10190ef1.
//
// Solidity: function taskTypes(uint256 ) view returns(uint8)
func (_Account *AccountCallerSession) TaskTypes(arg0 *big.Int) (uint8, error) {
	return _Account.Contract.TaskTypes(&_Account.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskId, uint8 taskType, string proof, bool isSubmitted)
func (_Account *AccountCaller) Tasks(opts *bind.CallOpts, arg0 string) (struct {
	TaskId      string
	TaskType    uint8
	Proof       string
	IsSubmitted bool
}, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "tasks", arg0)

	outstruct := new(struct {
		TaskId      string
		TaskType    uint8
		Proof       string
		IsSubmitted bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TaskId = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TaskType = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Proof = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.IsSubmitted = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskId, uint8 taskType, string proof, bool isSubmitted)
func (_Account *AccountSession) Tasks(arg0 string) (struct {
	TaskId      string
	TaskType    uint8
	Proof       string
	IsSubmitted bool
}, error) {
	return _Account.Contract.Tasks(&_Account.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskId, uint8 taskType, string proof, bool isSubmitted)
func (_Account *AccountCallerSession) Tasks(arg0 string) (struct {
	TaskId      string
	TaskType    uint8
	Proof       string
	IsSubmitted bool
}, error) {
	return _Account.Contract.Tasks(&_Account.CallOpts, arg0)
}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountCaller) Worker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Account.contract.Call(opts, &out, "worker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountSession) Worker() (common.Address, error) {
	return _Account.Contract.Worker(&_Account.CallOpts)
}

// Worker is a free data retrieval call binding the contract method 0x4d547ada.
//
// Solidity: function worker() view returns(address)
func (_Account *AccountCallerSession) Worker() (common.Address, error) {
	return _Account.Contract.Worker(&_Account.CallOpts)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountTransactor) ChangeBeneficiary(opts *bind.TransactOpts, newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeBeneficiary", newBeneficiary)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountSession) ChangeBeneficiary(newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeBeneficiary(&_Account.TransactOpts, newBeneficiary)
}

// ChangeBeneficiary is a paid mutator transaction binding the contract method 0xdc070657.
//
// Solidity: function changeBeneficiary(address newBeneficiary) returns()
func (_Account *AccountTransactorSession) ChangeBeneficiary(newBeneficiary common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeBeneficiary(&_Account.TransactOpts, newBeneficiary)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountTransactor) ChangeMultiaddrs(opts *bind.TransactOpts, newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeMultiaddrs", newMultiaddrs)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountSession) ChangeMultiaddrs(newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.Contract.ChangeMultiaddrs(&_Account.TransactOpts, newMultiaddrs)
}

// ChangeMultiaddrs is a paid mutator transaction binding the contract method 0x94f21938.
//
// Solidity: function changeMultiaddrs(string[] newMultiaddrs) returns()
func (_Account *AccountTransactorSession) ChangeMultiaddrs(newMultiaddrs []string) (*types.Transaction, error) {
	return _Account.Contract.ChangeMultiaddrs(&_Account.TransactOpts, newMultiaddrs)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountTransactor) ChangeOwnerAddress(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeOwnerAddress", newOwner)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountSession) ChangeOwnerAddress(newOwner common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeOwnerAddress(&_Account.TransactOpts, newOwner)
}

// ChangeOwnerAddress is a paid mutator transaction binding the contract method 0x85eac05f.
//
// Solidity: function changeOwnerAddress(address newOwner) returns()
func (_Account *AccountTransactorSession) ChangeOwnerAddress(newOwner common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeOwnerAddress(&_Account.TransactOpts, newOwner)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountTransactor) ChangeTaskTypes(opts *bind.TransactOpts, newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeTaskTypes", newTaskTypes)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountSession) ChangeTaskTypes(newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.Contract.ChangeTaskTypes(&_Account.TransactOpts, newTaskTypes)
}

// ChangeTaskTypes is a paid mutator transaction binding the contract method 0x1dcdd4e3.
//
// Solidity: function changeTaskTypes(uint8[] newTaskTypes) returns()
func (_Account *AccountTransactorSession) ChangeTaskTypes(newTaskTypes []uint8) (*types.Transaction, error) {
	return _Account.Contract.ChangeTaskTypes(&_Account.TransactOpts, newTaskTypes)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountTransactor) ChangeWorker(opts *bind.TransactOpts, newWorker common.Address) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "changeWorker", newWorker)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountSession) ChangeWorker(newWorker common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeWorker(&_Account.TransactOpts, newWorker)
}

// ChangeWorker is a paid mutator transaction binding the contract method 0x7ef71fd0.
//
// Solidity: function changeWorker(address newWorker) returns()
func (_Account *AccountTransactorSession) ChangeWorker(newWorker common.Address) (*types.Transaction, error) {
	return _Account.Contract.ChangeWorker(&_Account.TransactOpts, newWorker)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x5ded591b.
//
// Solidity: function submitUBIProof(string _taskId, uint8 _taskType, string _proof) returns()
func (_Account *AccountTransactor) SubmitUBIProof(opts *bind.TransactOpts, _taskId string, _taskType uint8, _proof string) (*types.Transaction, error) {
	return _Account.contract.Transact(opts, "submitUBIProof", _taskId, _taskType, _proof)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x5ded591b.
//
// Solidity: function submitUBIProof(string _taskId, uint8 _taskType, string _proof) returns()
func (_Account *AccountSession) SubmitUBIProof(_taskId string, _taskType uint8, _proof string) (*types.Transaction, error) {
	return _Account.Contract.SubmitUBIProof(&_Account.TransactOpts, _taskId, _taskType, _proof)
}

// SubmitUBIProof is a paid mutator transaction binding the contract method 0x5ded591b.
//
// Solidity: function submitUBIProof(string _taskId, uint8 _taskType, string _proof) returns()
func (_Account *AccountTransactorSession) SubmitUBIProof(_taskId string, _taskType uint8, _proof string) (*types.Transaction, error) {
	return _Account.Contract.SubmitUBIProof(&_Account.TransactOpts, _taskId, _taskType, _proof)
}

// AccountBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the Account contract.
type AccountBeneficiaryChangedIterator struct {
	Event *AccountBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountBeneficiaryChanged represents a BeneficiaryChanged event raised by the Account contract.
type AccountBeneficiaryChanged struct {
	PreviousBeneficiary common.Address
	NewBeneficiary      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address previousBeneficiary, address newBeneficiary)
func (_Account *AccountFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts) (*AccountBeneficiaryChangedIterator, error) {

	logs, sub, err := _Account.contract.FilterLogs(opts, "BeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return &AccountBeneficiaryChangedIterator{contract: _Account.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address previousBeneficiary, address newBeneficiary)
func (_Account *AccountFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *AccountBeneficiaryChanged) (event.Subscription, error) {

	logs, sub, err := _Account.contract.WatchLogs(opts, "BeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountBeneficiaryChanged)
				if err := _Account.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address previousBeneficiary, address newBeneficiary)
func (_Account *AccountFilterer) ParseBeneficiaryChanged(log types.Log) (*AccountBeneficiaryChanged, error) {
	event := new(AccountBeneficiaryChanged)
	if err := _Account.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountCPAccountDeployedIterator is returned from FilterCPAccountDeployed and is used to iterate over the raw logs and unpacked data for CPAccountDeployed events raised by the Account contract.
type AccountCPAccountDeployedIterator struct {
	Event *AccountCPAccountDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountCPAccountDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountCPAccountDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountCPAccountDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountCPAccountDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountCPAccountDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountCPAccountDeployed represents a CPAccountDeployed event raised by the Account contract.
type AccountCPAccountDeployed struct {
	CpAccount common.Address
	Owner     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCPAccountDeployed is a free log retrieval operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) FilterCPAccountDeployed(opts *bind.FilterOpts, cpAccount []common.Address, owner []common.Address) (*AccountCPAccountDeployedIterator, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "CPAccountDeployed", cpAccountRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &AccountCPAccountDeployedIterator{contract: _Account.contract, event: "CPAccountDeployed", logs: logs, sub: sub}, nil
}

// WatchCPAccountDeployed is a free log subscription operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) WatchCPAccountDeployed(opts *bind.WatchOpts, sink chan<- *AccountCPAccountDeployed, cpAccount []common.Address, owner []common.Address) (event.Subscription, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "CPAccountDeployed", cpAccountRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountCPAccountDeployed)
				if err := _Account.contract.UnpackLog(event, "CPAccountDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCPAccountDeployed is a log parse operation binding the contract event 0x888c5e0808e1036ef310751df81f4014ad465ac117616d45f5d601912c2775b5.
//
// Solidity: event CPAccountDeployed(address indexed cpAccount, address indexed owner)
func (_Account *AccountFilterer) ParseCPAccountDeployed(log types.Log) (*AccountCPAccountDeployed, error) {
	event := new(AccountCPAccountDeployed)
	if err := _Account.contract.UnpackLog(event, "CPAccountDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountMultiaddrsChangedIterator is returned from FilterMultiaddrsChanged and is used to iterate over the raw logs and unpacked data for MultiaddrsChanged events raised by the Account contract.
type AccountMultiaddrsChangedIterator struct {
	Event *AccountMultiaddrsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountMultiaddrsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountMultiaddrsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountMultiaddrsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountMultiaddrsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountMultiaddrsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountMultiaddrsChanged represents a MultiaddrsChanged event raised by the Account contract.
type AccountMultiaddrsChanged struct {
	NewMultiaddrs []string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMultiaddrsChanged is a free log retrieval operation binding the contract event 0x34f0cbd777d8d394caa00ae618bb83ee053819e2943bbd10c6c61019d4c57582.
//
// Solidity: event MultiaddrsChanged(string[] newMultiaddrs)
func (_Account *AccountFilterer) FilterMultiaddrsChanged(opts *bind.FilterOpts) (*AccountMultiaddrsChangedIterator, error) {

	logs, sub, err := _Account.contract.FilterLogs(opts, "MultiaddrsChanged")
	if err != nil {
		return nil, err
	}
	return &AccountMultiaddrsChangedIterator{contract: _Account.contract, event: "MultiaddrsChanged", logs: logs, sub: sub}, nil
}

// WatchMultiaddrsChanged is a free log subscription operation binding the contract event 0x34f0cbd777d8d394caa00ae618bb83ee053819e2943bbd10c6c61019d4c57582.
//
// Solidity: event MultiaddrsChanged(string[] newMultiaddrs)
func (_Account *AccountFilterer) WatchMultiaddrsChanged(opts *bind.WatchOpts, sink chan<- *AccountMultiaddrsChanged) (event.Subscription, error) {

	logs, sub, err := _Account.contract.WatchLogs(opts, "MultiaddrsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountMultiaddrsChanged)
				if err := _Account.contract.UnpackLog(event, "MultiaddrsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultiaddrsChanged is a log parse operation binding the contract event 0x34f0cbd777d8d394caa00ae618bb83ee053819e2943bbd10c6c61019d4c57582.
//
// Solidity: event MultiaddrsChanged(string[] newMultiaddrs)
func (_Account *AccountFilterer) ParseMultiaddrsChanged(log types.Log) (*AccountMultiaddrsChanged, error) {
	event := new(AccountMultiaddrsChanged)
	if err := _Account.contract.UnpackLog(event, "MultiaddrsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Account contract.
type AccountOwnershipTransferredIterator struct {
	Event *AccountOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountOwnershipTransferred represents a OwnershipTransferred event raised by the Account contract.
type AccountOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AccountOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AccountOwnershipTransferredIterator{contract: _Account.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AccountOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountOwnershipTransferred)
				if err := _Account.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Account *AccountFilterer) ParseOwnershipTransferred(log types.Log) (*AccountOwnershipTransferred, error) {
	event := new(AccountOwnershipTransferred)
	if err := _Account.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountTaskTypesChangedIterator is returned from FilterTaskTypesChanged and is used to iterate over the raw logs and unpacked data for TaskTypesChanged events raised by the Account contract.
type AccountTaskTypesChangedIterator struct {
	Event *AccountTaskTypesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountTaskTypesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountTaskTypesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountTaskTypesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountTaskTypesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountTaskTypesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountTaskTypesChanged represents a TaskTypesChanged event raised by the Account contract.
type AccountTaskTypesChanged struct {
	NewTaskTypes []uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTaskTypesChanged is a free log retrieval operation binding the contract event 0x8d73e7eaae1ba475a7760838d69c6b77ac133a5e1f086b6f08e87dbc2a5aedf7.
//
// Solidity: event TaskTypesChanged(uint8[] newTaskTypes)
func (_Account *AccountFilterer) FilterTaskTypesChanged(opts *bind.FilterOpts) (*AccountTaskTypesChangedIterator, error) {

	logs, sub, err := _Account.contract.FilterLogs(opts, "TaskTypesChanged")
	if err != nil {
		return nil, err
	}
	return &AccountTaskTypesChangedIterator{contract: _Account.contract, event: "TaskTypesChanged", logs: logs, sub: sub}, nil
}

// WatchTaskTypesChanged is a free log subscription operation binding the contract event 0x8d73e7eaae1ba475a7760838d69c6b77ac133a5e1f086b6f08e87dbc2a5aedf7.
//
// Solidity: event TaskTypesChanged(uint8[] newTaskTypes)
func (_Account *AccountFilterer) WatchTaskTypesChanged(opts *bind.WatchOpts, sink chan<- *AccountTaskTypesChanged) (event.Subscription, error) {

	logs, sub, err := _Account.contract.WatchLogs(opts, "TaskTypesChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountTaskTypesChanged)
				if err := _Account.contract.UnpackLog(event, "TaskTypesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskTypesChanged is a log parse operation binding the contract event 0x8d73e7eaae1ba475a7760838d69c6b77ac133a5e1f086b6f08e87dbc2a5aedf7.
//
// Solidity: event TaskTypesChanged(uint8[] newTaskTypes)
func (_Account *AccountFilterer) ParseTaskTypesChanged(log types.Log) (*AccountTaskTypesChanged, error) {
	event := new(AccountTaskTypesChanged)
	if err := _Account.contract.UnpackLog(event, "TaskTypesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountUBIProofSubmittedIterator is returned from FilterUBIProofSubmitted and is used to iterate over the raw logs and unpacked data for UBIProofSubmitted events raised by the Account contract.
type AccountUBIProofSubmittedIterator struct {
	Event *AccountUBIProofSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountUBIProofSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountUBIProofSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountUBIProofSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountUBIProofSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountUBIProofSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountUBIProofSubmitted represents a UBIProofSubmitted event raised by the Account contract.
type AccountUBIProofSubmitted struct {
	Submitter common.Address
	TaskId    string
	TaskType  uint8
	Proof     string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUBIProofSubmitted is a free log retrieval operation binding the contract event 0xb0932b4b506d9cd3385a587fac2523cba482adf0fb97fac3bba18f9becd79c5f.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, string taskId, uint8 taskType, string proof)
func (_Account *AccountFilterer) FilterUBIProofSubmitted(opts *bind.FilterOpts, submitter []common.Address) (*AccountUBIProofSubmittedIterator, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "UBIProofSubmitted", submitterRule)
	if err != nil {
		return nil, err
	}
	return &AccountUBIProofSubmittedIterator{contract: _Account.contract, event: "UBIProofSubmitted", logs: logs, sub: sub}, nil
}

// WatchUBIProofSubmitted is a free log subscription operation binding the contract event 0xb0932b4b506d9cd3385a587fac2523cba482adf0fb97fac3bba18f9becd79c5f.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, string taskId, uint8 taskType, string proof)
func (_Account *AccountFilterer) WatchUBIProofSubmitted(opts *bind.WatchOpts, sink chan<- *AccountUBIProofSubmitted, submitter []common.Address) (event.Subscription, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "UBIProofSubmitted", submitterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountUBIProofSubmitted)
				if err := _Account.contract.UnpackLog(event, "UBIProofSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUBIProofSubmitted is a log parse operation binding the contract event 0xb0932b4b506d9cd3385a587fac2523cba482adf0fb97fac3bba18f9becd79c5f.
//
// Solidity: event UBIProofSubmitted(address indexed submitter, string taskId, uint8 taskType, string proof)
func (_Account *AccountFilterer) ParseUBIProofSubmitted(log types.Log) (*AccountUBIProofSubmitted, error) {
	event := new(AccountUBIProofSubmitted)
	if err := _Account.contract.UnpackLog(event, "UBIProofSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountWorkerChangedIterator is returned from FilterWorkerChanged and is used to iterate over the raw logs and unpacked data for WorkerChanged events raised by the Account contract.
type AccountWorkerChangedIterator struct {
	Event *AccountWorkerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountWorkerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountWorkerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountWorkerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountWorkerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountWorkerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountWorkerChanged represents a WorkerChanged event raised by the Account contract.
type AccountWorkerChanged struct {
	PreviousWorker common.Address
	NewWorker      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWorkerChanged is a free log retrieval operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) FilterWorkerChanged(opts *bind.FilterOpts, previousWorker []common.Address, newWorker []common.Address) (*AccountWorkerChangedIterator, error) {

	var previousWorkerRule []interface{}
	for _, previousWorkerItem := range previousWorker {
		previousWorkerRule = append(previousWorkerRule, previousWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _Account.contract.FilterLogs(opts, "WorkerChanged", previousWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return &AccountWorkerChangedIterator{contract: _Account.contract, event: "WorkerChanged", logs: logs, sub: sub}, nil
}

// WatchWorkerChanged is a free log subscription operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) WatchWorkerChanged(opts *bind.WatchOpts, sink chan<- *AccountWorkerChanged, previousWorker []common.Address, newWorker []common.Address) (event.Subscription, error) {

	var previousWorkerRule []interface{}
	for _, previousWorkerItem := range previousWorker {
		previousWorkerRule = append(previousWorkerRule, previousWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _Account.contract.WatchLogs(opts, "WorkerChanged", previousWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountWorkerChanged)
				if err := _Account.contract.UnpackLog(event, "WorkerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkerChanged is a log parse operation binding the contract event 0xff0f4fef355d1325bd378bd316ef7faadfd662d369efbe879652d102ecbcd932.
//
// Solidity: event WorkerChanged(address indexed previousWorker, address indexed newWorker)
func (_Account *AccountFilterer) ParseWorkerChanged(log types.Log) (*AccountWorkerChanged, error) {
	event := new(AccountWorkerChanged)
	if err := _Account.contract.UnpackLog(event, "WorkerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
