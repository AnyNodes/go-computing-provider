// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package account

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ECPCollateralUpgradeableCPInfo is an auto generated low-level Go binding around an user-defined struct.
type ECPCollateralUpgradeableCPInfo struct {
	Cp            common.Address
	Balance       *big.Int
	FrozenBalance *big.Int
	Status        string
}

// CollateralMetaData contains all meta data concerning the Collateral contract.
var CollateralMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofTx\",\"type\":\"string\"}],\"name\":\"DisputeProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"LockCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"UnlockCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"batchLockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cpAddress\",\"type\":\"address\"}],\"name\":\"cpInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"frozenBalance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"structECPCollateralUpgradeable.CPInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cpStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proofTx\",\"type\":\"string\"}],\"name\":\"disputeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"lockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"setTaskCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"slashCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSlashedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b620001cf565b60006200006d6200016560201b60201c565b90508060000160089054906101000a900460ff1615620000b9576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001625767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001599190620001b2565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b620001ac816200018d565b82525050565b6000602082019050620001c96000830184620001a1565b92915050565b608051613384620001f960003960008181611b0901528181611b5e0152611d1901526133846000f3fe6080604052600436106101a05760003560e01c806354fd4d50116100ec5780639d1fef811161008a578063e80d9dec11610064578063e80d9dec14610591578063f2fde38b146105ba578063f31cc883146105e3578063f340fa011461060e576101b0565b80639d1fef8114610500578063a664c21614610529578063ad3cb1cc14610566576101b0565b806370480275116100c6578063704802751461047e578063715018a6146104a75780638129fc1c146104be5780638da5cb5b146104d5576101b0565b806354fd4d50146103ff5780635cccf9591461042a5780636f99f15c14610453576101b0565b80632e1a7d4d11610159578063417cd8f211610133578063417cd8f21461036657806347a7d1071461038f5780634f1ef286146103b857806352d1902d146103d4576101b0565b80632e1a7d4d146102d55780633aa692a9146102fe5780633fe6517714610329576101b0565b8063080da133146101b55780631785f53c146101cc57806317f17498146101f557806324d7806c1461021e578063266565a91461025b57806327e235e314610298576101b0565b366101b0576101ae3361062a565b005b600080fd5b3480156101c157600080fd5b506101ca6106c7565b005b3480156101d857600080fd5b506101f360048036038101906101ee91906123b7565b61075f565b005b34801561020157600080fd5b5061021c6004803603810190610217919061241a565b6107c2565b005b34801561022a57600080fd5b50610245600480360381019061024091906123b7565b610a27565b6040516102529190612475565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d91906123b7565b610a47565b60405161028f919061249f565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba91906123b7565b610a5f565b6040516102cc91906124d3565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f791906124ee565b610a77565b005b34801561030a57600080fd5b50610313610bdb565b604051610320919061249f565b60405180910390f35b34801561033557600080fd5b50610350600480360381019061034b91906123b7565b610be1565b60405161035d91906125ab565b60405180910390f35b34801561037257600080fd5b5061038d600480360381019061038891906124ee565b610c81565b005b34801561039b57600080fd5b506103b660048036038101906103b1919061241a565b610d17565b005b6103d260048036038101906103cd9190612702565b610f36565b005b3480156103e057600080fd5b506103e9610f55565b6040516103f69190612777565b60405180910390f35b34801561040b57600080fd5b50610414610f88565b604051610421919061249f565b60405180910390f35b34801561043657600080fd5b50610451600480360381019061044c919061285a565b610f91565b005b34801561045f57600080fd5b5061046861127e565b604051610475919061249f565b60405180910390f35b34801561048a57600080fd5b506104a560048036038101906104a091906123b7565b611284565b005b3480156104b357600080fd5b506104bc6112e7565b005b3480156104ca57600080fd5b506104d36112fb565b005b3480156104e157600080fd5b506104ea6114e9565b6040516104f791906128c5565b60405180910390f35b34801561050c57600080fd5b50610527600480360381019061052291906123b7565b611521565b005b34801561053557600080fd5b50610550600480360381019061054b91906123b7565b61166b565b60405161055d91906129ba565b60405180910390f35b34801561057257600080fd5b5061057b61181e565b60405161058891906125ab565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b39190612a7d565b611857565b005b3480156105c657600080fd5b506105e160048036038101906105dc91906123b7565b611893565b005b3480156105ef57600080fd5b506105f8611919565b604051610605919061249f565b60405180910390f35b610628600480360381019061062391906123b7565b61062a565b005b34600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106799190612af5565b925050819055506106898161191f565b7f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f623382346040516106bc93929190612b39565b60405180910390a150565b6106cf611a80565b600080549050600080819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610722573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051610754929190612b70565b60405180910390a150565b610767611a80565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590612c0b565b60405180910390fd5b806002541015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088a90612c9d565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161091c57600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b806002600082825461092e9190612cbd565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109849190612cbd565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109da9190612af5565b925050819055506109ea8261191f565b7fc7ae170c69aded6d7ec48daf0791af755bba11e11d558b57e5c932bb98ddbb068282604051610a1b929190612b70565b60405180910390a15050565b60036020528060005260406000206000915054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b60046020528060005260406000206000915090505481565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541215610af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af090612d3d565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b489190612d5d565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b95573d6000803e3d6000fd5b50610b9f3361191f565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051610bd0929190612b70565b60405180910390a150565b60015481565b60066020528060005260406000206000915090508054610c0090612dcf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2c90612dcf565b8015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b505050505081565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490612c0b565b60405180910390fd5b8060018190555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90612c0b565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541215610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90612e72565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e749190612d5d565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610eca9190612e92565b92505081905550610eda8261191f565b60008190508060026000828254610ef19190612e92565b925050819055507fa26b43a600355250ae61523a4d3a1269abbbbf462b22c633d629920603d05e458383604051610f29929190612b70565b60405180910390a1505050565b610f3e611b07565b610f4782611bed565b610f518282611bf8565b5050565b6000610f5f611d17565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006001905090565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101490612c0b565b60405180910390fd5b60005b82518110156110d857816004600085848151811061104157611040612ec6565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205412156110c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bc90612e72565b60405180910390fd5b80806110d090612ef5565b915050611020565b5060005b825181101561124e5781600460008584815181106110fd576110fc612ec6565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461114e9190612d5d565b92505081905550816005600085848151811061116d5761116c612ec6565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111be9190612e92565b925050819055506111e88382815181106111db576111da612ec6565b5b602002602001015161191f565b7fa26b43a600355250ae61523a4d3a1269abbbbf462b22c633d629920603d05e4583828151811061121c5761121b612ec6565b5b602002602001015183604051611233929190612b70565b60405180910390a1808061124690612ef5565b9150506110dc565b50600081835161125e9190612f3d565b905080600260008282546112729190612e92565b92505081905550505050565b60005481565b61128c611a80565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6112ef611a80565b6112f96000611d9e565b565b6000611305611e75565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156113535750825b9050600060018367ffffffffffffffff16148015611388575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611396575080155b156113cd576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561141d5760018560000160086101000a81548160ff0219169083151502179055505b61142633611e9d565b61142e611eb1565b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083156114e25760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516114d99190612fd8565b60405180910390a15b5050505050565b6000806114f4611ebb565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a490612c0b565b60405180910390fd5b600060026001546115be9190612f3d565b905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461160f9190612d5d565b92505081905550806000808282546116279190612e92565b925050819055507f09db6afc50880d4b2c88b755013032247b3eaedcfae4cf3e5a7013dde8021557828260405161165f929190612b70565b60405180910390a15050565b611673612307565b61167b612307565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816020018181525050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816040018181525050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461178f90612dcf565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb90612dcf565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b5050505050816060018190525080915050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b7faec1d412a3c1e4a13fc2a2e19ac38a5af192a9cf17b074fca8146a2d0655e0c33382604051611888929190612ff3565b60405180910390a150565b61189b611a80565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361190d5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161190491906128c5565b60405180910390fd5b61191681611d9e565b50565b60025481565b600154600561192e9190612f3d565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054126119fa576040518060400160405280600981526020017f7a6b41756374696f6e0000000000000000000000000000000000000000000000815250600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816119f491906131c5565b50611a7d565b6040518060400160405280600381526020017f4e53430000000000000000000000000000000000000000000000000000000000815250600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081611a7b91906131c5565b505b50565b611a88611ee3565b73ffffffffffffffffffffffffffffffffffffffff16611aa66114e9565b73ffffffffffffffffffffffffffffffffffffffff1614611b0557611ac9611ee3565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611afc91906128c5565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611bb457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611b9b611eeb565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611beb576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611bf5611a80565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c6057506040513d601f19601f82011682018060405250810190611c5d91906132c3565b60015b611ca157816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611c9891906128c5565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611d0857806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611cff9190612777565b60405180910390fd5b611d128383611f42565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611d9c576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611da8611ebb565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611ea5611fb5565b611eae81611ff5565b50565b611eb9611fb5565b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600033905090565b6000611f197f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61207b565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611f4b82612085565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115611fa857611fa28282612152565b50611fb1565b611fb06121d6565b5b5050565b611fbd612213565b611ff3576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611ffd611fb5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361206f5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161206691906128c5565b60405180910390fd5b61207881611d9e565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b036120e157806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016120d891906128c5565b60405180910390fd5b8061210e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61207b565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff168460405161217c9190613337565b600060405180830381855af49150503d80600081146121b7576040519150601f19603f3d011682016040523d82523d6000602084013e6121bc565b606091505b50915091506121cc858383612233565b9250505092915050565b6000341115612211576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600061221d611e75565b60000160089054906101000a900460ff16905090565b60608261224857612243826122c2565b6122ba565b60008251148015612270575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156122b257836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016122a991906128c5565b60405180910390fd5b8190506122bb565b5b9392505050565b6000815111156122d55780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061238482612359565b9050919050565b61239481612379565b811461239f57600080fd5b50565b6000813590506123b18161238b565b92915050565b6000602082840312156123cd576123cc61234f565b5b60006123db848285016123a2565b91505092915050565b6000819050919050565b6123f7816123e4565b811461240257600080fd5b50565b600081359050612414816123ee565b92915050565b600080604083850312156124315761243061234f565b5b600061243f858286016123a2565b925050602061245085828601612405565b9150509250929050565b60008115159050919050565b61246f8161245a565b82525050565b600060208201905061248a6000830184612466565b92915050565b612499816123e4565b82525050565b60006020820190506124b46000830184612490565b92915050565b6000819050919050565b6124cd816124ba565b82525050565b60006020820190506124e860008301846124c4565b92915050565b6000602082840312156125045761250361234f565b5b600061251284828501612405565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561255557808201518184015260208101905061253a565b60008484015250505050565b6000601f19601f8301169050919050565b600061257d8261251b565b6125878185612526565b9350612597818560208601612537565b6125a081612561565b840191505092915050565b600060208201905081810360008301526125c58184612572565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61260f82612561565b810181811067ffffffffffffffff8211171561262e5761262d6125d7565b5b80604052505050565b6000612641612345565b905061264d8282612606565b919050565b600067ffffffffffffffff82111561266d5761266c6125d7565b5b61267682612561565b9050602081019050919050565b82818337600083830152505050565b60006126a56126a084612652565b612637565b9050828152602081018484840111156126c1576126c06125d2565b5b6126cc848285612683565b509392505050565b600082601f8301126126e9576126e86125cd565b5b81356126f9848260208601612692565b91505092915050565b600080604083850312156127195761271861234f565b5b6000612727858286016123a2565b925050602083013567ffffffffffffffff81111561274857612747612354565b5b612754858286016126d4565b9150509250929050565b6000819050919050565b6127718161275e565b82525050565b600060208201905061278c6000830184612768565b92915050565b600067ffffffffffffffff8211156127ad576127ac6125d7565b5b602082029050602081019050919050565b600080fd5b60006127d66127d184612792565b612637565b905080838252602082019050602084028301858111156127f9576127f86127be565b5b835b81811015612822578061280e88826123a2565b8452602084019350506020810190506127fb565b5050509392505050565b600082601f830112612841576128406125cd565b5b81356128518482602086016127c3565b91505092915050565b600080604083850312156128715761287061234f565b5b600083013567ffffffffffffffff81111561288f5761288e612354565b5b61289b8582860161282c565b92505060206128ac85828601612405565b9150509250929050565b6128bf81612379565b82525050565b60006020820190506128da60008301846128b6565b92915050565b6128e981612379565b82525050565b6128f8816124ba565b82525050565b612907816123e4565b82525050565b600082825260208201905092915050565b60006129298261251b565b612933818561290d565b9350612943818560208601612537565b61294c81612561565b840191505092915050565b600060808301600083015161296f60008601826128e0565b50602083015161298260208601826128ef565b50604083015161299560408601826128fe565b50606083015184820360608601526129ad828261291e565b9150508091505092915050565b600060208201905081810360008301526129d48184612957565b905092915050565b600067ffffffffffffffff8211156129f7576129f66125d7565b5b612a0082612561565b9050602081019050919050565b6000612a20612a1b846129dc565b612637565b905082815260208101848484011115612a3c57612a3b6125d2565b5b612a47848285612683565b509392505050565b600082601f830112612a6457612a636125cd565b5b8135612a74848260208601612a0d565b91505092915050565b600060208284031215612a9357612a9261234f565b5b600082013567ffffffffffffffff811115612ab157612ab0612354565b5b612abd84828501612a4f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b00826124ba565b9150612b0b836124ba565b925082820190508281121560008312168382126000841215161715612b3357612b32612ac6565b5b92915050565b6000606082019050612b4e60008301866128b6565b612b5b60208301856128b6565b612b686040830184612490565b949350505050565b6000604082019050612b8560008301856128b6565b612b926020830184612490565b9392505050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b6000612bf5602683612526565b9150612c0082612b99565b604082019050919050565b60006020820190508181036000830152612c2481612be8565b9050919050565b7f496e73756666696369656e742062616c616e636520696e207461736b20636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000612c87602583612526565b9150612c9282612c2b565b604082019050919050565b60006020820190508181036000830152612cb681612c7a565b9050919050565b6000612cc8826123e4565b9150612cd3836123e4565b9250828203905081811115612ceb57612cea612ac6565b5b92915050565b7f576974686472617720616d6f756e7420657863656564732062616c616e636500600082015250565b6000612d27601f83612526565b9150612d3282612cf1565b602082019050919050565b60006020820190508181036000830152612d5681612d1a565b9050919050565b6000612d68826124ba565b9150612d73836124ba565b9250828203905081811260008412168282136000851215161715612d9a57612d99612ac6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612de757607f821691505b602082108103612dfa57612df9612da0565b5b50919050565b7f4e6f7420656e6f7567682062616c616e636520666f7220636f6c6c617465726160008201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e5c602183612526565b9150612e6782612e00565b604082019050919050565b60006020820190508181036000830152612e8b81612e4f565b9050919050565b6000612e9d826123e4565b9150612ea8836123e4565b9250828201905080821115612ec057612ebf612ac6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612f00826123e4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f3257612f31612ac6565b5b600182019050919050565b6000612f48826123e4565b9150612f53836123e4565b9250828202612f61816123e4565b91508282048414831517612f7857612f77612ac6565b5b5092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000612fc2612fbd612fb884612f7f565b612f9d565b612f89565b9050919050565b612fd281612fa7565b82525050565b6000602082019050612fed6000830184612fc9565b92915050565b600060408201905061300860008301856128b6565b818103602083015261301a8184612572565b90509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613048565b61308f8683613048565b95508019841693508086168417925050509392505050565b60006130c26130bd6130b8846123e4565b612f9d565b6123e4565b9050919050565b6000819050919050565b6130dc836130a7565b6130f06130e8826130c9565b848454613055565b825550505050565b600090565b6131056130f8565b6131108184846130d3565b505050565b5b81811015613134576131296000826130fd565b600181019050613116565b5050565b601f8211156131795761314a81613023565b61315384613038565b81016020851015613162578190505b61317661316e85613038565b830182613115565b50505b505050565b600082821c905092915050565b600061319c6000198460080261317e565b1980831691505092915050565b60006131b5838361318b565b9150826002028217905092915050565b6131ce8261251b565b67ffffffffffffffff8111156131e7576131e66125d7565b5b6131f18254612dcf565b6131fc828285613138565b600060209050601f83116001811461322f576000841561321d578287015190505b61322785826131a9565b86555061328f565b601f19841661323d86613023565b60005b8281101561326557848901518255600182019150602085019450602081019050613240565b86831015613282578489015161327e601f89168261318b565b8355505b6001600288020188555050505b505050505050565b6132a08161275e565b81146132ab57600080fd5b50565b6000815190506132bd81613297565b92915050565b6000602082840312156132d9576132d861234f565b5b60006132e7848285016132ae565b91505092915050565b600081519050919050565b600081905092915050565b6000613311826132f0565b61331b81856132fb565b935061332b818560208601612537565b80840191505092915050565b60006133438284613306565b91508190509291505056fea2646970667358221220f80fcdc55b91000094997d6fa3f9b6a7a393a087a490529e3b27b47346449cfa64736f6c63430008140033",
}

// CollateralABI is the input ABI used to generate the binding from.
// Deprecated: Use CollateralMetaData.ABI instead.
var CollateralABI = CollateralMetaData.ABI

// CollateralBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CollateralMetaData.Bin instead.
var CollateralBin = CollateralMetaData.Bin

// DeployCollateral deploys a new Ethereum contract, binding an instance of Collateral to it.
func DeployCollateral(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Collateral, error) {
	parsed, err := CollateralMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CollateralBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Collateral{CollateralCaller: CollateralCaller{contract: contract}, CollateralTransactor: CollateralTransactor{contract: contract}, CollateralFilterer: CollateralFilterer{contract: contract}}, nil
}

// Collateral is an auto generated Go binding around an Ethereum contract.
type Collateral struct {
	CollateralCaller     // Read-only binding to the contract
	CollateralTransactor // Write-only binding to the contract
	CollateralFilterer   // Log filterer for contract events
}

// CollateralCaller is an auto generated read-only Go binding around an Ethereum contract.
type CollateralCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollateralTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CollateralTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollateralFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CollateralFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CollateralSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CollateralSession struct {
	Contract     *Collateral       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CollateralCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CollateralCallerSession struct {
	Contract *CollateralCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CollateralTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CollateralTransactorSession struct {
	Contract     *CollateralTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CollateralRaw is an auto generated low-level Go binding around an Ethereum contract.
type CollateralRaw struct {
	Contract *Collateral // Generic contract binding to access the raw methods on
}

// CollateralCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CollateralCallerRaw struct {
	Contract *CollateralCaller // Generic read-only contract binding to access the raw methods on
}

// CollateralTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CollateralTransactorRaw struct {
	Contract *CollateralTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCollateral creates a new instance of Collateral, bound to a specific deployed contract.
func NewCollateral(address common.Address, backend bind.ContractBackend) (*Collateral, error) {
	contract, err := bindCollateral(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Collateral{CollateralCaller: CollateralCaller{contract: contract}, CollateralTransactor: CollateralTransactor{contract: contract}, CollateralFilterer: CollateralFilterer{contract: contract}}, nil
}

// NewCollateralCaller creates a new read-only instance of Collateral, bound to a specific deployed contract.
func NewCollateralCaller(address common.Address, caller bind.ContractCaller) (*CollateralCaller, error) {
	contract, err := bindCollateral(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CollateralCaller{contract: contract}, nil
}

// NewCollateralTransactor creates a new write-only instance of Collateral, bound to a specific deployed contract.
func NewCollateralTransactor(address common.Address, transactor bind.ContractTransactor) (*CollateralTransactor, error) {
	contract, err := bindCollateral(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CollateralTransactor{contract: contract}, nil
}

// NewCollateralFilterer creates a new log filterer instance of Collateral, bound to a specific deployed contract.
func NewCollateralFilterer(address common.Address, filterer bind.ContractFilterer) (*CollateralFilterer, error) {
	contract, err := bindCollateral(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CollateralFilterer{contract: contract}, nil
}

// bindCollateral binds a generic wrapper to an already deployed contract.
func bindCollateral(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CollateralMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collateral *CollateralRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Collateral.Contract.CollateralCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collateral *CollateralRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.Contract.CollateralTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collateral *CollateralRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Collateral.Contract.CollateralTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Collateral *CollateralCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Collateral.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Collateral *CollateralTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Collateral *CollateralTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Collateral.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Collateral *CollateralCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Collateral *CollateralSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _Collateral.Contract.UPGRADEINTERFACEVERSION(&_Collateral.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Collateral *CollateralCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _Collateral.Contract.UPGRADEINTERFACEVERSION(&_Collateral.CallOpts)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(int256)
func (_Collateral *CollateralCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "balances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(int256)
func (_Collateral *CollateralSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Collateral.Contract.Balances(&_Collateral.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(int256)
func (_Collateral *CollateralCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Collateral.Contract.Balances(&_Collateral.CallOpts, arg0)
}

// CpInfo is a free data retrieval call binding the contract method 0xa664c216.
//
// Solidity: function cpInfo(address cpAddress) view returns((address,int256,uint256,string))
func (_Collateral *CollateralCaller) CpInfo(opts *bind.CallOpts, cpAddress common.Address) (ECPCollateralUpgradeableCPInfo, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "cpInfo", cpAddress)

	if err != nil {
		return *new(ECPCollateralUpgradeableCPInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ECPCollateralUpgradeableCPInfo)).(*ECPCollateralUpgradeableCPInfo)

	return out0, err

}

// CpInfo is a free data retrieval call binding the contract method 0xa664c216.
//
// Solidity: function cpInfo(address cpAddress) view returns((address,int256,uint256,string))
func (_Collateral *CollateralSession) CpInfo(cpAddress common.Address) (ECPCollateralUpgradeableCPInfo, error) {
	return _Collateral.Contract.CpInfo(&_Collateral.CallOpts, cpAddress)
}

// CpInfo is a free data retrieval call binding the contract method 0xa664c216.
//
// Solidity: function cpInfo(address cpAddress) view returns((address,int256,uint256,string))
func (_Collateral *CollateralCallerSession) CpInfo(cpAddress common.Address) (ECPCollateralUpgradeableCPInfo, error) {
	return _Collateral.Contract.CpInfo(&_Collateral.CallOpts, cpAddress)
}

// CpStatus is a free data retrieval call binding the contract method 0x3fe65177.
//
// Solidity: function cpStatus(address ) view returns(string)
func (_Collateral *CollateralCaller) CpStatus(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "cpStatus", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CpStatus is a free data retrieval call binding the contract method 0x3fe65177.
//
// Solidity: function cpStatus(address ) view returns(string)
func (_Collateral *CollateralSession) CpStatus(arg0 common.Address) (string, error) {
	return _Collateral.Contract.CpStatus(&_Collateral.CallOpts, arg0)
}

// CpStatus is a free data retrieval call binding the contract method 0x3fe65177.
//
// Solidity: function cpStatus(address ) view returns(string)
func (_Collateral *CollateralCallerSession) CpStatus(arg0 common.Address) (string, error) {
	return _Collateral.Contract.CpStatus(&_Collateral.CallOpts, arg0)
}

// FrozenBalance is a free data retrieval call binding the contract method 0x266565a9.
//
// Solidity: function frozenBalance(address ) view returns(uint256)
func (_Collateral *CollateralCaller) FrozenBalance(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "frozenBalance", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FrozenBalance is a free data retrieval call binding the contract method 0x266565a9.
//
// Solidity: function frozenBalance(address ) view returns(uint256)
func (_Collateral *CollateralSession) FrozenBalance(arg0 common.Address) (*big.Int, error) {
	return _Collateral.Contract.FrozenBalance(&_Collateral.CallOpts, arg0)
}

// FrozenBalance is a free data retrieval call binding the contract method 0x266565a9.
//
// Solidity: function frozenBalance(address ) view returns(uint256)
func (_Collateral *CollateralCallerSession) FrozenBalance(arg0 common.Address) (*big.Int, error) {
	return _Collateral.Contract.FrozenBalance(&_Collateral.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Collateral *CollateralCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Collateral *CollateralSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _Collateral.Contract.IsAdmin(&_Collateral.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_Collateral *CollateralCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _Collateral.Contract.IsAdmin(&_Collateral.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Collateral *CollateralCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Collateral *CollateralSession) Owner() (common.Address, error) {
	return _Collateral.Contract.Owner(&_Collateral.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Collateral *CollateralCallerSession) Owner() (common.Address, error) {
	return _Collateral.Contract.Owner(&_Collateral.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Collateral *CollateralCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Collateral *CollateralSession) ProxiableUUID() ([32]byte, error) {
	return _Collateral.Contract.ProxiableUUID(&_Collateral.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Collateral *CollateralCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Collateral.Contract.ProxiableUUID(&_Collateral.CallOpts)
}

// SlashedFunds is a free data retrieval call binding the contract method 0x6f99f15c.
//
// Solidity: function slashedFunds() view returns(uint256)
func (_Collateral *CollateralCaller) SlashedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "slashedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashedFunds is a free data retrieval call binding the contract method 0x6f99f15c.
//
// Solidity: function slashedFunds() view returns(uint256)
func (_Collateral *CollateralSession) SlashedFunds() (*big.Int, error) {
	return _Collateral.Contract.SlashedFunds(&_Collateral.CallOpts)
}

// SlashedFunds is a free data retrieval call binding the contract method 0x6f99f15c.
//
// Solidity: function slashedFunds() view returns(uint256)
func (_Collateral *CollateralCallerSession) SlashedFunds() (*big.Int, error) {
	return _Collateral.Contract.SlashedFunds(&_Collateral.CallOpts)
}

// TaskBalance is a free data retrieval call binding the contract method 0xf31cc883.
//
// Solidity: function taskBalance() view returns(uint256)
func (_Collateral *CollateralCaller) TaskBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "taskBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TaskBalance is a free data retrieval call binding the contract method 0xf31cc883.
//
// Solidity: function taskBalance() view returns(uint256)
func (_Collateral *CollateralSession) TaskBalance() (*big.Int, error) {
	return _Collateral.Contract.TaskBalance(&_Collateral.CallOpts)
}

// TaskBalance is a free data retrieval call binding the contract method 0xf31cc883.
//
// Solidity: function taskBalance() view returns(uint256)
func (_Collateral *CollateralCallerSession) TaskBalance() (*big.Int, error) {
	return _Collateral.Contract.TaskBalance(&_Collateral.CallOpts)
}

// TaskCapacity is a free data retrieval call binding the contract method 0x3aa692a9.
//
// Solidity: function taskCapacity() view returns(uint256)
func (_Collateral *CollateralCaller) TaskCapacity(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "taskCapacity")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TaskCapacity is a free data retrieval call binding the contract method 0x3aa692a9.
//
// Solidity: function taskCapacity() view returns(uint256)
func (_Collateral *CollateralSession) TaskCapacity() (*big.Int, error) {
	return _Collateral.Contract.TaskCapacity(&_Collateral.CallOpts)
}

// TaskCapacity is a free data retrieval call binding the contract method 0x3aa692a9.
//
// Solidity: function taskCapacity() view returns(uint256)
func (_Collateral *CollateralCallerSession) TaskCapacity() (*big.Int, error) {
	return _Collateral.Contract.TaskCapacity(&_Collateral.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_Collateral *CollateralCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Collateral.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_Collateral *CollateralSession) Version() (*big.Int, error) {
	return _Collateral.Contract.Version(&_Collateral.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_Collateral *CollateralCallerSession) Version() (*big.Int, error) {
	return _Collateral.Contract.Version(&_Collateral.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_Collateral *CollateralTransactor) AddAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "addAdmin", newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_Collateral *CollateralSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.AddAdmin(&_Collateral.TransactOpts, newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_Collateral *CollateralTransactorSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.AddAdmin(&_Collateral.TransactOpts, newAdmin)
}

// BatchLockCollateral is a paid mutator transaction binding the contract method 0x5cccf959.
//
// Solidity: function batchLockCollateral(address[] cpList, uint256 collateral) returns()
func (_Collateral *CollateralTransactor) BatchLockCollateral(opts *bind.TransactOpts, cpList []common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "batchLockCollateral", cpList, collateral)
}

// BatchLockCollateral is a paid mutator transaction binding the contract method 0x5cccf959.
//
// Solidity: function batchLockCollateral(address[] cpList, uint256 collateral) returns()
func (_Collateral *CollateralSession) BatchLockCollateral(cpList []common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.BatchLockCollateral(&_Collateral.TransactOpts, cpList, collateral)
}

// BatchLockCollateral is a paid mutator transaction binding the contract method 0x5cccf959.
//
// Solidity: function batchLockCollateral(address[] cpList, uint256 collateral) returns()
func (_Collateral *CollateralTransactorSession) BatchLockCollateral(cpList []common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.BatchLockCollateral(&_Collateral.TransactOpts, cpList, collateral)
}

// Deposit is a paid mutator transaction binding the contract method 0xf340fa01.
//
// Solidity: function deposit(address recipient) payable returns()
func (_Collateral *CollateralTransactor) Deposit(opts *bind.TransactOpts, recipient common.Address) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "deposit", recipient)
}

// Deposit is a paid mutator transaction binding the contract method 0xf340fa01.
//
// Solidity: function deposit(address recipient) payable returns()
func (_Collateral *CollateralSession) Deposit(recipient common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.Deposit(&_Collateral.TransactOpts, recipient)
}

// Deposit is a paid mutator transaction binding the contract method 0xf340fa01.
//
// Solidity: function deposit(address recipient) payable returns()
func (_Collateral *CollateralTransactorSession) Deposit(recipient common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.Deposit(&_Collateral.TransactOpts, recipient)
}

// DisputeProof is a paid mutator transaction binding the contract method 0xe80d9dec.
//
// Solidity: function disputeProof(string proofTx) returns()
func (_Collateral *CollateralTransactor) DisputeProof(opts *bind.TransactOpts, proofTx string) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "disputeProof", proofTx)
}

// DisputeProof is a paid mutator transaction binding the contract method 0xe80d9dec.
//
// Solidity: function disputeProof(string proofTx) returns()
func (_Collateral *CollateralSession) DisputeProof(proofTx string) (*types.Transaction, error) {
	return _Collateral.Contract.DisputeProof(&_Collateral.TransactOpts, proofTx)
}

// DisputeProof is a paid mutator transaction binding the contract method 0xe80d9dec.
//
// Solidity: function disputeProof(string proofTx) returns()
func (_Collateral *CollateralTransactorSession) DisputeProof(proofTx string) (*types.Transaction, error) {
	return _Collateral.Contract.DisputeProof(&_Collateral.TransactOpts, proofTx)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Collateral *CollateralTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Collateral *CollateralSession) Initialize() (*types.Transaction, error) {
	return _Collateral.Contract.Initialize(&_Collateral.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Collateral *CollateralTransactorSession) Initialize() (*types.Transaction, error) {
	return _Collateral.Contract.Initialize(&_Collateral.TransactOpts)
}

// LockCollateral is a paid mutator transaction binding the contract method 0x47a7d107.
//
// Solidity: function lockCollateral(address cp, uint256 collateral) returns()
func (_Collateral *CollateralTransactor) LockCollateral(opts *bind.TransactOpts, cp common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "lockCollateral", cp, collateral)
}

// LockCollateral is a paid mutator transaction binding the contract method 0x47a7d107.
//
// Solidity: function lockCollateral(address cp, uint256 collateral) returns()
func (_Collateral *CollateralSession) LockCollateral(cp common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.LockCollateral(&_Collateral.TransactOpts, cp, collateral)
}

// LockCollateral is a paid mutator transaction binding the contract method 0x47a7d107.
//
// Solidity: function lockCollateral(address cp, uint256 collateral) returns()
func (_Collateral *CollateralTransactorSession) LockCollateral(cp common.Address, collateral *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.LockCollateral(&_Collateral.TransactOpts, cp, collateral)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_Collateral *CollateralTransactor) RemoveAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "removeAdmin", admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_Collateral *CollateralSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.RemoveAdmin(&_Collateral.TransactOpts, admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_Collateral *CollateralTransactorSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.RemoveAdmin(&_Collateral.TransactOpts, admin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Collateral *CollateralTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Collateral *CollateralSession) RenounceOwnership() (*types.Transaction, error) {
	return _Collateral.Contract.RenounceOwnership(&_Collateral.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Collateral *CollateralTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Collateral.Contract.RenounceOwnership(&_Collateral.TransactOpts)
}

// SetTaskCapacity is a paid mutator transaction binding the contract method 0x417cd8f2.
//
// Solidity: function setTaskCapacity(uint256 capacity) returns()
func (_Collateral *CollateralTransactor) SetTaskCapacity(opts *bind.TransactOpts, capacity *big.Int) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "setTaskCapacity", capacity)
}

// SetTaskCapacity is a paid mutator transaction binding the contract method 0x417cd8f2.
//
// Solidity: function setTaskCapacity(uint256 capacity) returns()
func (_Collateral *CollateralSession) SetTaskCapacity(capacity *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.SetTaskCapacity(&_Collateral.TransactOpts, capacity)
}

// SetTaskCapacity is a paid mutator transaction binding the contract method 0x417cd8f2.
//
// Solidity: function setTaskCapacity(uint256 capacity) returns()
func (_Collateral *CollateralTransactorSession) SetTaskCapacity(capacity *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.SetTaskCapacity(&_Collateral.TransactOpts, capacity)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x9d1fef81.
//
// Solidity: function slashCollateral(address cp) returns()
func (_Collateral *CollateralTransactor) SlashCollateral(opts *bind.TransactOpts, cp common.Address) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "slashCollateral", cp)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x9d1fef81.
//
// Solidity: function slashCollateral(address cp) returns()
func (_Collateral *CollateralSession) SlashCollateral(cp common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.SlashCollateral(&_Collateral.TransactOpts, cp)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x9d1fef81.
//
// Solidity: function slashCollateral(address cp) returns()
func (_Collateral *CollateralTransactorSession) SlashCollateral(cp common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.SlashCollateral(&_Collateral.TransactOpts, cp)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Collateral *CollateralTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Collateral *CollateralSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.TransferOwnership(&_Collateral.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Collateral *CollateralTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Collateral.Contract.TransferOwnership(&_Collateral.TransactOpts, newOwner)
}

// UnlockCollateral is a paid mutator transaction binding the contract method 0x17f17498.
//
// Solidity: function unlockCollateral(address recipient, uint256 amount) returns()
func (_Collateral *CollateralTransactor) UnlockCollateral(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "unlockCollateral", recipient, amount)
}

// UnlockCollateral is a paid mutator transaction binding the contract method 0x17f17498.
//
// Solidity: function unlockCollateral(address recipient, uint256 amount) returns()
func (_Collateral *CollateralSession) UnlockCollateral(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.UnlockCollateral(&_Collateral.TransactOpts, recipient, amount)
}

// UnlockCollateral is a paid mutator transaction binding the contract method 0x17f17498.
//
// Solidity: function unlockCollateral(address recipient, uint256 amount) returns()
func (_Collateral *CollateralTransactorSession) UnlockCollateral(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.UnlockCollateral(&_Collateral.TransactOpts, recipient, amount)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Collateral *CollateralTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Collateral *CollateralSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Collateral.Contract.UpgradeToAndCall(&_Collateral.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Collateral *CollateralTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Collateral.Contract.UpgradeToAndCall(&_Collateral.TransactOpts, newImplementation, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Collateral *CollateralTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Collateral *CollateralSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.Withdraw(&_Collateral.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Collateral *CollateralTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Collateral.Contract.Withdraw(&_Collateral.TransactOpts, amount)
}

// WithdrawSlashedFunds is a paid mutator transaction binding the contract method 0x080da133.
//
// Solidity: function withdrawSlashedFunds() returns()
func (_Collateral *CollateralTransactor) WithdrawSlashedFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.contract.Transact(opts, "withdrawSlashedFunds")
}

// WithdrawSlashedFunds is a paid mutator transaction binding the contract method 0x080da133.
//
// Solidity: function withdrawSlashedFunds() returns()
func (_Collateral *CollateralSession) WithdrawSlashedFunds() (*types.Transaction, error) {
	return _Collateral.Contract.WithdrawSlashedFunds(&_Collateral.TransactOpts)
}

// WithdrawSlashedFunds is a paid mutator transaction binding the contract method 0x080da133.
//
// Solidity: function withdrawSlashedFunds() returns()
func (_Collateral *CollateralTransactorSession) WithdrawSlashedFunds() (*types.Transaction, error) {
	return _Collateral.Contract.WithdrawSlashedFunds(&_Collateral.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Collateral *CollateralTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Collateral.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Collateral *CollateralSession) Receive() (*types.Transaction, error) {
	return _Collateral.Contract.Receive(&_Collateral.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Collateral *CollateralTransactorSession) Receive() (*types.Transaction, error) {
	return _Collateral.Contract.Receive(&_Collateral.TransactOpts)
}

// CollateralDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Collateral contract.
type CollateralDepositIterator struct {
	Event *CollateralDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralDeposit represents a Deposit event raised by the Collateral contract.
type CollateralDeposit struct {
	FundingWallet   common.Address
	ReceivingWallet common.Address
	DepositAmount   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address fundingWallet, address receivingWallet, uint256 depositAmount)
func (_Collateral *CollateralFilterer) FilterDeposit(opts *bind.FilterOpts) (*CollateralDepositIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &CollateralDepositIterator{contract: _Collateral.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address fundingWallet, address receivingWallet, uint256 depositAmount)
func (_Collateral *CollateralFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *CollateralDeposit) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralDeposit)
				if err := _Collateral.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address fundingWallet, address receivingWallet, uint256 depositAmount)
func (_Collateral *CollateralFilterer) ParseDeposit(log types.Log) (*CollateralDeposit, error) {
	event := new(CollateralDeposit)
	if err := _Collateral.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralDisputeProofIterator is returned from FilterDisputeProof and is used to iterate over the raw logs and unpacked data for DisputeProof events raised by the Collateral contract.
type CollateralDisputeProofIterator struct {
	Event *CollateralDisputeProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralDisputeProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralDisputeProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralDisputeProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralDisputeProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralDisputeProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralDisputeProof represents a DisputeProof event raised by the Collateral contract.
type CollateralDisputeProof struct {
	Disputer common.Address
	ProofTx  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDisputeProof is a free log retrieval operation binding the contract event 0xaec1d412a3c1e4a13fc2a2e19ac38a5af192a9cf17b074fca8146a2d0655e0c3.
//
// Solidity: event DisputeProof(address disputer, string proofTx)
func (_Collateral *CollateralFilterer) FilterDisputeProof(opts *bind.FilterOpts) (*CollateralDisputeProofIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "DisputeProof")
	if err != nil {
		return nil, err
	}
	return &CollateralDisputeProofIterator{contract: _Collateral.contract, event: "DisputeProof", logs: logs, sub: sub}, nil
}

// WatchDisputeProof is a free log subscription operation binding the contract event 0xaec1d412a3c1e4a13fc2a2e19ac38a5af192a9cf17b074fca8146a2d0655e0c3.
//
// Solidity: event DisputeProof(address disputer, string proofTx)
func (_Collateral *CollateralFilterer) WatchDisputeProof(opts *bind.WatchOpts, sink chan<- *CollateralDisputeProof) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "DisputeProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralDisputeProof)
				if err := _Collateral.contract.UnpackLog(event, "DisputeProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputeProof is a log parse operation binding the contract event 0xaec1d412a3c1e4a13fc2a2e19ac38a5af192a9cf17b074fca8146a2d0655e0c3.
//
// Solidity: event DisputeProof(address disputer, string proofTx)
func (_Collateral *CollateralFilterer) ParseDisputeProof(log types.Log) (*CollateralDisputeProof, error) {
	event := new(CollateralDisputeProof)
	if err := _Collateral.contract.UnpackLog(event, "DisputeProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Collateral contract.
type CollateralInitializedIterator struct {
	Event *CollateralInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralInitialized represents a Initialized event raised by the Collateral contract.
type CollateralInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Collateral *CollateralFilterer) FilterInitialized(opts *bind.FilterOpts) (*CollateralInitializedIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CollateralInitializedIterator{contract: _Collateral.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Collateral *CollateralFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CollateralInitialized) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralInitialized)
				if err := _Collateral.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Collateral *CollateralFilterer) ParseInitialized(log types.Log) (*CollateralInitialized, error) {
	event := new(CollateralInitialized)
	if err := _Collateral.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralLockCollateralIterator is returned from FilterLockCollateral and is used to iterate over the raw logs and unpacked data for LockCollateral events raised by the Collateral contract.
type CollateralLockCollateralIterator struct {
	Event *CollateralLockCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralLockCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralLockCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralLockCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralLockCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralLockCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralLockCollateral represents a LockCollateral event raised by the Collateral contract.
type CollateralLockCollateral struct {
	Cp               common.Address
	CollateralAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLockCollateral is a free log retrieval operation binding the contract event 0xa26b43a600355250ae61523a4d3a1269abbbbf462b22c633d629920603d05e45.
//
// Solidity: event LockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) FilterLockCollateral(opts *bind.FilterOpts) (*CollateralLockCollateralIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "LockCollateral")
	if err != nil {
		return nil, err
	}
	return &CollateralLockCollateralIterator{contract: _Collateral.contract, event: "LockCollateral", logs: logs, sub: sub}, nil
}

// WatchLockCollateral is a free log subscription operation binding the contract event 0xa26b43a600355250ae61523a4d3a1269abbbbf462b22c633d629920603d05e45.
//
// Solidity: event LockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) WatchLockCollateral(opts *bind.WatchOpts, sink chan<- *CollateralLockCollateral) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "LockCollateral")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralLockCollateral)
				if err := _Collateral.contract.UnpackLog(event, "LockCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockCollateral is a log parse operation binding the contract event 0xa26b43a600355250ae61523a4d3a1269abbbbf462b22c633d629920603d05e45.
//
// Solidity: event LockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) ParseLockCollateral(log types.Log) (*CollateralLockCollateral, error) {
	event := new(CollateralLockCollateral)
	if err := _Collateral.contract.UnpackLog(event, "LockCollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Collateral contract.
type CollateralOwnershipTransferredIterator struct {
	Event *CollateralOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralOwnershipTransferred represents a OwnershipTransferred event raised by the Collateral contract.
type CollateralOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Collateral *CollateralFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CollateralOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CollateralOwnershipTransferredIterator{contract: _Collateral.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Collateral *CollateralFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CollateralOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralOwnershipTransferred)
				if err := _Collateral.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Collateral *CollateralFilterer) ParseOwnershipTransferred(log types.Log) (*CollateralOwnershipTransferred, error) {
	event := new(CollateralOwnershipTransferred)
	if err := _Collateral.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralSlashCollateralIterator is returned from FilterSlashCollateral and is used to iterate over the raw logs and unpacked data for SlashCollateral events raised by the Collateral contract.
type CollateralSlashCollateralIterator struct {
	Event *CollateralSlashCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralSlashCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralSlashCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralSlashCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralSlashCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralSlashCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralSlashCollateral represents a SlashCollateral event raised by the Collateral contract.
type CollateralSlashCollateral struct {
	Cp     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSlashCollateral is a free log retrieval operation binding the contract event 0x09db6afc50880d4b2c88b755013032247b3eaedcfae4cf3e5a7013dde8021557.
//
// Solidity: event SlashCollateral(address cp, uint256 amount)
func (_Collateral *CollateralFilterer) FilterSlashCollateral(opts *bind.FilterOpts) (*CollateralSlashCollateralIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "SlashCollateral")
	if err != nil {
		return nil, err
	}
	return &CollateralSlashCollateralIterator{contract: _Collateral.contract, event: "SlashCollateral", logs: logs, sub: sub}, nil
}

// WatchSlashCollateral is a free log subscription operation binding the contract event 0x09db6afc50880d4b2c88b755013032247b3eaedcfae4cf3e5a7013dde8021557.
//
// Solidity: event SlashCollateral(address cp, uint256 amount)
func (_Collateral *CollateralFilterer) WatchSlashCollateral(opts *bind.WatchOpts, sink chan<- *CollateralSlashCollateral) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "SlashCollateral")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralSlashCollateral)
				if err := _Collateral.contract.UnpackLog(event, "SlashCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashCollateral is a log parse operation binding the contract event 0x09db6afc50880d4b2c88b755013032247b3eaedcfae4cf3e5a7013dde8021557.
//
// Solidity: event SlashCollateral(address cp, uint256 amount)
func (_Collateral *CollateralFilterer) ParseSlashCollateral(log types.Log) (*CollateralSlashCollateral, error) {
	event := new(CollateralSlashCollateral)
	if err := _Collateral.contract.UnpackLog(event, "SlashCollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralUnlockCollateralIterator is returned from FilterUnlockCollateral and is used to iterate over the raw logs and unpacked data for UnlockCollateral events raised by the Collateral contract.
type CollateralUnlockCollateralIterator struct {
	Event *CollateralUnlockCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralUnlockCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralUnlockCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralUnlockCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralUnlockCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralUnlockCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralUnlockCollateral represents a UnlockCollateral event raised by the Collateral contract.
type CollateralUnlockCollateral struct {
	Cp               common.Address
	CollateralAmount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUnlockCollateral is a free log retrieval operation binding the contract event 0xc7ae170c69aded6d7ec48daf0791af755bba11e11d558b57e5c932bb98ddbb06.
//
// Solidity: event UnlockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) FilterUnlockCollateral(opts *bind.FilterOpts) (*CollateralUnlockCollateralIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "UnlockCollateral")
	if err != nil {
		return nil, err
	}
	return &CollateralUnlockCollateralIterator{contract: _Collateral.contract, event: "UnlockCollateral", logs: logs, sub: sub}, nil
}

// WatchUnlockCollateral is a free log subscription operation binding the contract event 0xc7ae170c69aded6d7ec48daf0791af755bba11e11d558b57e5c932bb98ddbb06.
//
// Solidity: event UnlockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) WatchUnlockCollateral(opts *bind.WatchOpts, sink chan<- *CollateralUnlockCollateral) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "UnlockCollateral")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralUnlockCollateral)
				if err := _Collateral.contract.UnpackLog(event, "UnlockCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockCollateral is a log parse operation binding the contract event 0xc7ae170c69aded6d7ec48daf0791af755bba11e11d558b57e5c932bb98ddbb06.
//
// Solidity: event UnlockCollateral(address cp, uint256 collateralAmount)
func (_Collateral *CollateralFilterer) ParseUnlockCollateral(log types.Log) (*CollateralUnlockCollateral, error) {
	event := new(CollateralUnlockCollateral)
	if err := _Collateral.contract.UnpackLog(event, "UnlockCollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Collateral contract.
type CollateralUpgradedIterator struct {
	Event *CollateralUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralUpgraded represents a Upgraded event raised by the Collateral contract.
type CollateralUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Collateral *CollateralFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*CollateralUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &CollateralUpgradedIterator{contract: _Collateral.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Collateral *CollateralFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *CollateralUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralUpgraded)
				if err := _Collateral.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Collateral *CollateralFilterer) ParseUpgraded(log types.Log) (*CollateralUpgraded, error) {
	event := new(CollateralUpgraded)
	if err := _Collateral.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CollateralWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Collateral contract.
type CollateralWithdrawIterator struct {
	Event *CollateralWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CollateralWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CollateralWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CollateralWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CollateralWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CollateralWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CollateralWithdraw represents a Withdraw event raised by the Collateral contract.
type CollateralWithdraw struct {
	FundingWallet  common.Address
	WithdrawAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address fundingWallet, uint256 withdrawAmount)
func (_Collateral *CollateralFilterer) FilterWithdraw(opts *bind.FilterOpts) (*CollateralWithdrawIterator, error) {

	logs, sub, err := _Collateral.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &CollateralWithdrawIterator{contract: _Collateral.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address fundingWallet, uint256 withdrawAmount)
func (_Collateral *CollateralFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *CollateralWithdraw) (event.Subscription, error) {

	logs, sub, err := _Collateral.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CollateralWithdraw)
				if err := _Collateral.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address fundingWallet, uint256 withdrawAmount)
func (_Collateral *CollateralFilterer) ParseWithdraw(log types.Log) (*CollateralWithdraw, error) {
	event := new(CollateralWithdraw)
	if err := _Collateral.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
