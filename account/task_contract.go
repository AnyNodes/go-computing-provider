// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package account

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ECPTaskTaskInfo is an auto generated low-level Go binding around an user-defined struct.
type ECPTaskTaskInfo struct {
	TaskType          *big.Int
	ResourceType      *big.Int
	InputParam        string
	VerifyParam       string
	CpContractAddress common.Address
	Status            string
	RewardTx          string
	Proof             string
	ChallengeTx       string
	LockFundTx        string
	UnlockFundTx      string
	SlashTx           string
	Deadline          *big.Int
	IsSubmitted       bool
	IsChallenged      bool
}

// ECPTaskMetaData contains all meta data concerning the ECPTask contract.
var ECPTaskMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resourceType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_inputParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_verifyParam\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cpContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lockFundTx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"challengeTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"ChallengeAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lockFundTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"LockAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"RewardAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slashTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"SlashAndStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"SubmitProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"unlockFundTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"UnlockAndStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"challengeTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verifyParam\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"cpContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"challengeTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unlockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"slashTx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubmitted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChallenged\",\"type\":\"bool\"}],\"internalType\":\"structECPTask.TaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputParam\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChallenged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFundTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFundTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_challengeTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateChallengeAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateLockAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rewardTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateRewardAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_slashTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateSlashAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unlockFundTx\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateUnlockAndStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyParam\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50604051612ff1380380612ff183398181016040528101906100319190610444565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a2575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100999190610574565b60405180910390fd5b6100b1816101a960201b60201c565b50876001819055508660028190555085600390816100cf9190610791565b5084600490816100df9190610791565b508360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826006908161012f9190610791565b5080600d8190555081600a90816101469190610791565b506001600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050505050505050610860565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61028d8161027b565b8114610297575f80fd5b50565b5f815190506102a881610284565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102fc826102b6565b810181811067ffffffffffffffff8211171561031b5761031a6102c6565b5b80604052505050565b5f61032d61026a565b905061033982826102f3565b919050565b5f67ffffffffffffffff821115610358576103576102c6565b5b610361826102b6565b9050602081019050919050565b8281835e5f83830152505050565b5f61038e6103898461033e565b610324565b9050828152602081018484840111156103aa576103a96102b2565b5b6103b584828561036e565b509392505050565b5f82601f8301126103d1576103d06102ae565b5b81516103e184826020860161037c565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610413826103ea565b9050919050565b61042381610409565b811461042d575f80fd5b50565b5f8151905061043e8161041a565b92915050565b5f805f805f805f80610100898b03121561046157610460610273565b5b5f61046e8b828c0161029a565b985050602061047f8b828c0161029a565b975050604089015167ffffffffffffffff8111156104a05761049f610277565b5b6104ac8b828c016103bd565b965050606089015167ffffffffffffffff8111156104cd576104cc610277565b5b6104d98b828c016103bd565b95505060806104ea8b828c01610430565b94505060a089015167ffffffffffffffff81111561050b5761050a610277565b5b6105178b828c016103bd565b93505060c089015167ffffffffffffffff81111561053857610537610277565b5b6105448b828c016103bd565b92505060e06105558b828c0161029a565b9150509295985092959890939650565b61056e81610409565b82525050565b5f6020820190506105875f830184610565565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105db57607f821691505b6020821081036105ee576105ed610597565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610615565b61065a8683610615565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61069561069061068b8461027b565b610672565b61027b565b9050919050565b5f819050919050565b6106ae8361067b565b6106c26106ba8261069c565b848454610621565b825550505050565b5f90565b6106d66106ca565b6106e18184846106a5565b505050565b5b81811015610704576106f95f826106ce565b6001810190506106e7565b5050565b601f8211156107495761071a816105f4565b61072384610606565b81016020851015610732578190505b61074661073e85610606565b8301826106e6565b50505b505050565b5f82821c905092915050565b5f6107695f198460080261074e565b1980831691505092915050565b5f610781838361075a565b9150826002028217905092915050565b61079a8261058d565b67ffffffffffffffff8111156107b3576107b26102c6565b5b6107bd82546105c4565b6107c8828285610708565b5f60209050601f8311600181146107f9575f84156107e7578287015190505b6107f18582610776565b865550610858565b601f198416610807866105f4565b5f5b8281101561082e57848901518255600182019150602085019450602081019050610809565b8683101561084b5784890151610847601f89168261075a565b8355505b6001600288020188555050505b505050505050565b6127848061086d5f395ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80638cf6f32c116100f7578063e488168811610095578063f7d221901161006f578063f7d221901461044d578063f80cb18a1461046b578063faf924cf14610489578063fe140e63146104a7576101a7565b8063e4881688146103f5578063ec218dc414610413578063f2fde38b14610431576101a7565b80639df4d0fe116100d15780639df4d0fe14610381578063b07d7f521461039f578063b0a40371146103bb578063bac64a2e146103d7576101a7565b80638cf6f32c146103275780638da5cb5b1461034557806392395dc514610363576101a7565b8063497153e31161016457806354fd4d501161013e57806354fd4d50146102c55780636b24e930146102e3578063715018a6146102ff578063741b879014610309576101a7565b8063497153e31461026d5780634ad45b321461028b5780634dc17e58146102a7576101a7565b80631382fe66146101ab578063200d2ed2146101c757806324d7806c146101e557806329dcb0cf146102155780632c2e8faf146102335780632cae8b101461024f575b5f80fd5b6101c560048036038101906101c09190611c5c565b6104c5565b005b6101cf6105ad565b6040516101dc9190611d32565b60405180910390f35b6101ff60048036038101906101fa9190611dac565b610639565b60405161020c9190611df1565b60405180910390f35b61021d610656565b60405161022a9190611e22565b60405180910390f35b61024d60048036038101906102489190611e3b565b61065c565b005b610257610a33565b6040516102649190611d32565b60405180910390f35b610275610abf565b6040516102829190611d32565b60405180910390f35b6102a560048036038101906102a09190611c5c565b610b4b565b005b6102af610c33565b6040516102bc9190611d32565b60405180910390f35b6102cd610cbf565b6040516102da9190611d32565b60405180910390f35b6102fd60048036038101906102f89190611c5c565b610cfc565b005b610307610dff565b005b610311610e12565b60405161031e9190611df1565b60405180910390f35b61032f610e24565b60405161033c9190611e22565b60405180910390f35b61034d610e2a565b60405161035a9190611e91565b60405180910390f35b61036b610e51565b6040516103789190611e91565b60405180910390f35b610389610e76565b6040516103969190611df1565b60405180910390f35b6103b960048036038101906103b49190611c5c565b610e89565b005b6103d560048036038101906103d09190611c5c565b610f71565b005b6103df611059565b6040516103ec9190612097565b60405180910390f35b6103fd6115f0565b60405161040a9190611d32565b60405180910390f35b61041b61167c565b6040516104289190611d32565b60405180910390f35b61044b60048036038101906104469190611dac565b611708565b005b61045561178c565b6040516104629190611e22565b60405180910390f35b610473611792565b6040516104809190611d32565b60405180910390f35b61049161181e565b60405161049e9190611d32565b60405180910390f35b6104af6118aa565b6040516104bc9190611d32565b60405180910390f35b600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590612127565b60405180910390fd5b81600c908161055d919061233f565b50806006908161056d919061233f565b507f14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f600c60066040516105a192919061248f565b60405180910390a15050565b600680546105ba90612172565b80601f01602080910402602001604051908101604052809291908181526020018280546105e690612172565b80156106315780601f1061060857610100808354040283529160200191610631565b820191905f5260205f20905b81548152906001019060200180831161061457829003601f168201915b505050505081565b600f602052805f5260405f205f915054906101000a900460ff1681565b600d5481565b5f8060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f893d20e8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107269190612508565b5f604051808303815f865af19150503d805f811461075f576040519150601f19603f3d011682016040523d82523d5f602084013e610764565b606091505b5091509150816107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a09061258e565b60405180910390fd5b5f818060200190518101906107be91906125e7565b90505f8060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f67eaeddb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161088a9190612508565b5f604051808303815f865af19150503d805f81146108c3576040519150601f19603f3d011682016040523d82523d5f602084013e6108c8565b606091505b50915091508161090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090490612682565b60405180910390fd5b5f8180602001905181019061092291906125e7565b90508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061098957508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6109c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bf90612710565b60405180910390fd5b86600890816109d7919061233f565b506001600e5f6101000a81548160ff0219169083151502179055507f67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f6008604051610a22919061272e565b60405180910390a150505050505050565b60078054610a4090612172565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6c90612172565b8015610ab75780601f10610a8e57610100808354040283529160200191610ab7565b820191905f5260205f20905b815481529060010190602001808311610a9a57829003601f168201915b505050505081565b60048054610acc90612172565b80601f0160208091040260200160405190810160405280929190818152602001828054610af890612172565b8015610b435780601f10610b1a57610100808354040283529160200191610b43565b820191905f5260205f20905b815481529060010190602001808311610b2657829003601f168201915b505050505081565b600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90612127565b60405180910390fd5b81600a9081610be3919061233f565b508060069081610bf3919061233f565b507feb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2600a6006604051610c2792919061248f565b60405180910390a15050565b600c8054610c4090612172565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c90612172565b8015610cb75780601f10610c8e57610100808354040283529160200191610cb7565b820191905f5260205f20905b815481529060010190602001808311610c9a57829003601f168201915b505050505081565b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90612127565b60405180910390fd5b8160099081610d94919061233f565b508060069081610da4919061233f565b506001600e60016101000a81548160ff0219169083151502179055507f37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f560096006604051610df392919061248f565b60405180910390a15050565b610e07611936565b610e105f6119bd565b565b600e5f9054906101000a900460ff1681565b60015481565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60019054906101000a900460ff1681565b600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990612127565b60405180910390fd5b8160079081610f21919061233f565b508060069081610f31919061233f565b507f6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f60076006604051610f6592919061248f565b60405180910390a15050565b600f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff190612127565b60405180910390fd5b81600b9081611009919061233f565b508060069081611019919061233f565b507fa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa600b600660405161104d92919061248f565b60405180910390a15050565b611061611a85565b604051806101e00160405280600154815260200160025481526020016003805461108a90612172565b80601f01602080910402602001604051908101604052809291908181526020018280546110b690612172565b80156111015780601f106110d857610100808354040283529160200191611101565b820191905f5260205f20905b8154815290600101906020018083116110e457829003601f168201915b505050505081526020016004805461111890612172565b80601f016020809104026020016040519081016040528092919081815260200182805461114490612172565b801561118f5780601f106111665761010080835404028352916020019161118f565b820191905f5260205f20905b81548152906001019060200180831161117257829003601f168201915b5050505050815260200160055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600680546111e390612172565b80601f016020809104026020016040519081016040528092919081815260200182805461120f90612172565b801561125a5780601f106112315761010080835404028352916020019161125a565b820191905f5260205f20905b81548152906001019060200180831161123d57829003601f168201915b505050505081526020016007805461127190612172565b80601f016020809104026020016040519081016040528092919081815260200182805461129d90612172565b80156112e85780601f106112bf576101008083540402835291602001916112e8565b820191905f5260205f20905b8154815290600101906020018083116112cb57829003601f168201915b50505050508152602001600880546112ff90612172565b80601f016020809104026020016040519081016040528092919081815260200182805461132b90612172565b80156113765780601f1061134d57610100808354040283529160200191611376565b820191905f5260205f20905b81548152906001019060200180831161135957829003601f168201915b505050505081526020016009805461138d90612172565b80601f01602080910402602001604051908101604052809291908181526020018280546113b990612172565b80156114045780601f106113db57610100808354040283529160200191611404565b820191905f5260205f20905b8154815290600101906020018083116113e757829003601f168201915b50505050508152602001600a805461141b90612172565b80601f016020809104026020016040519081016040528092919081815260200182805461144790612172565b80156114925780601f1061146957610100808354040283529160200191611492565b820191905f5260205f20905b81548152906001019060200180831161147557829003601f168201915b50505050508152602001600b80546114a990612172565b80601f01602080910402602001604051908101604052809291908181526020018280546114d590612172565b80156115205780601f106114f757610100808354040283529160200191611520565b820191905f5260205f20905b81548152906001019060200180831161150357829003601f168201915b50505050508152602001600c805461153790612172565b80601f016020809104026020016040519081016040528092919081815260200182805461156390612172565b80156115ae5780601f10611585576101008083540402835291602001916115ae565b820191905f5260205f20905b81548152906001019060200180831161159157829003601f168201915b50505050508152602001600d548152602001600e5f9054906101000a900460ff1615158152602001600e60019054906101000a900460ff161515815250905090565b600980546115fd90612172565b80601f016020809104026020016040519081016040528092919081815260200182805461162990612172565b80156116745780601f1061164b57610100808354040283529160200191611674565b820191905f5260205f20905b81548152906001019060200180831161165757829003601f168201915b505050505081565b600b805461168990612172565b80601f01602080910402602001604051908101604052809291908181526020018280546116b590612172565b80156117005780601f106116d757610100808354040283529160200191611700565b820191905f5260205f20905b8154815290600101906020018083116116e357829003601f168201915b505050505081565b611710611936565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611780575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117779190611e91565b60405180910390fd5b611789816119bd565b50565b60025481565b600a805461179f90612172565b80601f01602080910402602001604051908101604052809291908181526020018280546117cb90612172565b80156118165780601f106117ed57610100808354040283529160200191611816565b820191905f5260205f20905b8154815290600101906020018083116117f957829003601f168201915b505050505081565b6008805461182b90612172565b80601f016020809104026020016040519081016040528092919081815260200182805461185790612172565b80156118a25780601f10611879576101008083540402835291602001916118a2565b820191905f5260205f20905b81548152906001019060200180831161188557829003601f168201915b505050505081565b600380546118b790612172565b80601f01602080910402602001604051908101604052809291908181526020018280546118e390612172565b801561192e5780601f106119055761010080835404028352916020019161192e565b820191905f5260205f20905b81548152906001019060200180831161191157829003601f168201915b505050505081565b61193e611a7e565b73ffffffffffffffffffffffffffffffffffffffff1661195c610e2a565b73ffffffffffffffffffffffffffffffffffffffff16146119bb5761197f611a7e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016119b29190611e91565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b604051806101e001604052805f81526020015f815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020015f81526020015f151581526020015f151581525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611b6e82611b28565b810181811067ffffffffffffffff82111715611b8d57611b8c611b38565b5b80604052505050565b5f611b9f611b0f565b9050611bab8282611b65565b919050565b5f67ffffffffffffffff821115611bca57611bc9611b38565b5b611bd382611b28565b9050602081019050919050565b828183375f83830152505050565b5f611c00611bfb84611bb0565b611b96565b905082815260208101848484011115611c1c57611c1b611b24565b5b611c27848285611be0565b509392505050565b5f82601f830112611c4357611c42611b20565b5b8135611c53848260208601611bee565b91505092915050565b5f8060408385031215611c7257611c71611b18565b5b5f83013567ffffffffffffffff811115611c8f57611c8e611b1c565b5b611c9b85828601611c2f565b925050602083013567ffffffffffffffff811115611cbc57611cbb611b1c565b5b611cc885828601611c2f565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f611d0482611cd2565b611d0e8185611cdc565b9350611d1e818560208601611cec565b611d2781611b28565b840191505092915050565b5f6020820190508181035f830152611d4a8184611cfa565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611d7b82611d52565b9050919050565b611d8b81611d71565b8114611d95575f80fd5b50565b5f81359050611da681611d82565b92915050565b5f60208284031215611dc157611dc0611b18565b5b5f611dce84828501611d98565b91505092915050565b5f8115159050919050565b611deb81611dd7565b82525050565b5f602082019050611e045f830184611de2565b92915050565b5f819050919050565b611e1c81611e0a565b82525050565b5f602082019050611e355f830184611e13565b92915050565b5f60208284031215611e5057611e4f611b18565b5b5f82013567ffffffffffffffff811115611e6d57611e6c611b1c565b5b611e7984828501611c2f565b91505092915050565b611e8b81611d71565b82525050565b5f602082019050611ea45f830184611e82565b92915050565b611eb381611e0a565b82525050565b5f82825260208201905092915050565b5f611ed382611cd2565b611edd8185611eb9565b9350611eed818560208601611cec565b611ef681611b28565b840191505092915050565b611f0a81611d71565b82525050565b611f1981611dd7565b82525050565b5f6101e083015f830151611f355f860182611eaa565b506020830151611f486020860182611eaa565b5060408301518482036040860152611f608282611ec9565b91505060608301518482036060860152611f7a8282611ec9565b9150506080830151611f8f6080860182611f01565b5060a083015184820360a0860152611fa78282611ec9565b91505060c083015184820360c0860152611fc18282611ec9565b91505060e083015184820360e0860152611fdb8282611ec9565b915050610100830151848203610100860152611ff78282611ec9565b9150506101208301518482036101208601526120138282611ec9565b91505061014083015184820361014086015261202f8282611ec9565b91505061016083015184820361016086015261204b8282611ec9565b915050610180830151612062610180860182611eaa565b506101a08301516120776101a0860182611f10565b506101c083015161208c6101c0860182611f10565b508091505092915050565b5f6020820190508181035f8301526120af8184611f1f565b905092915050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e5f8201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b5f612111602683611cdc565b915061211c826120b7565b604082019050919050565b5f6020820190508181035f83015261213e81612105565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061218957607f821691505b60208210810361219c5761219b612145565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026121fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826121c3565b61220886836121c3565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61224361223e61223984611e0a565b612220565b611e0a565b9050919050565b5f819050919050565b61225c83612229565b6122706122688261224a565b8484546121cf565b825550505050565b5f90565b612284612278565b61228f818484612253565b505050565b5b818110156122b2576122a75f8261227c565b600181019050612295565b5050565b601f8211156122f7576122c8816121a2565b6122d1846121b4565b810160208510156122e0578190505b6122f46122ec856121b4565b830182612294565b50505b505050565b5f82821c905092915050565b5f6123175f19846008026122fc565b1980831691505092915050565b5f61232f8383612308565b9150826002028217905092915050565b61234882611cd2565b67ffffffffffffffff81111561236157612360611b38565b5b61236b8254612172565b6123768282856122b6565b5f60209050601f8311600181146123a7575f8415612395578287015190505b61239f8582612324565b865550612406565b601f1984166123b5866121a2565b5f5b828110156123dc578489015182556001820191506020850194506020810190506123b7565b868310156123f957848901516123f5601f891682612308565b8355505b6001600288020188555050505b505050505050565b5f815461241a81612172565b6124248186611cdc565b9450600182165f811461243e576001811461245457612486565b60ff198316865281151560200286019350612486565b61245d856121a2565b5f5b8381101561247e5781548189015260018201915060208101905061245f565b808801955050505b50505092915050565b5f6040820190508181035f8301526124a7818561240e565b905081810360208301526124bb818461240e565b90509392505050565b5f81519050919050565b5f81905092915050565b5f6124e2826124c4565b6124ec81856124ce565b93506124fc818560208601611cec565b80840191505092915050565b5f61251382846124d8565b915081905092915050565b7f4661696c656420746f2063616c6c206765744f776e65722066756e6374696f6e5f8201527f206f662043504163636f756e7400000000000000000000000000000000000000602082015250565b5f612578602d83611cdc565b91506125838261251e565b604082019050919050565b5f6020820190508181035f8301526125a58161256c565b9050919050565b5f6125b682611d52565b9050919050565b6125c6816125ac565b81146125d0575f80fd5b50565b5f815190506125e1816125bd565b92915050565b5f602082840312156125fc576125fb611b18565b5b5f612609848285016125d3565b91505092915050565b7f4661696c656420746f2063616c6c20676574576f726b65722066756e6374696f5f8201527f6e206f662043504163636f756e74000000000000000000000000000000000000602082015250565b5f61266c602e83611cdc565b915061267782612612565b604082019050919050565b5f6020820190508181035f83015261269981612660565b9050919050565b7f4f6e6c792074686520435020636f6e7472616374206f776e6572206f7220776f5f8201527f726b65722063616e207375626d69742070726f6f662e00000000000000000000602082015250565b5f6126fa603683611cdc565b9150612705826126a0565b604082019050919050565b5f6020820190508181035f830152612727816126ee565b9050919050565b5f6020820190508181035f830152612746818461240e565b90509291505056fea264697066735822122085d93df1ad1acde3bef2a8b344b47d1e6499aa29d397187ae0c49c478561038764736f6c63430008190033",
}

// ECPTaskABI is the input ABI used to generate the binding from.
// Deprecated: Use ECPTaskMetaData.ABI instead.
var ECPTaskABI = ECPTaskMetaData.ABI

// ECPTaskBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ECPTaskMetaData.Bin instead.
var ECPTaskBin = ECPTaskMetaData.Bin

// DeployECPTask deploys a new Ethereum contract, binding an instance of ECPTask to it.
func DeployECPTask(auth *bind.TransactOpts, backend bind.ContractBackend, _taskType *big.Int, _resourceType *big.Int, _inputParam string, _verifyParam string, _cpContractAddress common.Address, _status string, _lockFundTx string, _deadline *big.Int) (common.Address, *types.Transaction, *ECPTask, error) {
	parsed, err := ECPTaskMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ECPTaskBin), backend, _taskType, _resourceType, _inputParam, _verifyParam, _cpContractAddress, _status, _lockFundTx, _deadline)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ECPTask{ECPTaskCaller: ECPTaskCaller{contract: contract}, ECPTaskTransactor: ECPTaskTransactor{contract: contract}, ECPTaskFilterer: ECPTaskFilterer{contract: contract}}, nil
}

// ECPTask is an auto generated Go binding around an Ethereum contract.
type ECPTask struct {
	ECPTaskCaller     // Read-only binding to the contract
	ECPTaskTransactor // Write-only binding to the contract
	ECPTaskFilterer   // Log filterer for contract events
}

// ECPTaskCaller is an auto generated read-only Go binding around an Ethereum contract.
type ECPTaskCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECPTaskTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ECPTaskTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECPTaskFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ECPTaskFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECPTaskSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ECPTaskSession struct {
	Contract     *ECPTask          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ECPTaskCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ECPTaskCallerSession struct {
	Contract *ECPTaskCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ECPTaskTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ECPTaskTransactorSession struct {
	Contract     *ECPTaskTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ECPTaskRaw is an auto generated low-level Go binding around an Ethereum contract.
type ECPTaskRaw struct {
	Contract *ECPTask // Generic contract binding to access the raw methods on
}

// ECPTaskCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ECPTaskCallerRaw struct {
	Contract *ECPTaskCaller // Generic read-only contract binding to access the raw methods on
}

// ECPTaskTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ECPTaskTransactorRaw struct {
	Contract *ECPTaskTransactor // Generic write-only contract binding to access the raw methods on
}

// NewECPTask creates a new instance of ECPTask, bound to a specific deployed contract.
func NewECPTask(address common.Address, backend bind.ContractBackend) (*ECPTask, error) {
	contract, err := bindECPTask(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ECPTask{ECPTaskCaller: ECPTaskCaller{contract: contract}, ECPTaskTransactor: ECPTaskTransactor{contract: contract}, ECPTaskFilterer: ECPTaskFilterer{contract: contract}}, nil
}

// NewECPTaskCaller creates a new read-only instance of ECPTask, bound to a specific deployed contract.
func NewECPTaskCaller(address common.Address, caller bind.ContractCaller) (*ECPTaskCaller, error) {
	contract, err := bindECPTask(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ECPTaskCaller{contract: contract}, nil
}

// NewECPTaskTransactor creates a new write-only instance of ECPTask, bound to a specific deployed contract.
func NewECPTaskTransactor(address common.Address, transactor bind.ContractTransactor) (*ECPTaskTransactor, error) {
	contract, err := bindECPTask(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ECPTaskTransactor{contract: contract}, nil
}

// NewECPTaskFilterer creates a new log filterer instance of ECPTask, bound to a specific deployed contract.
func NewECPTaskFilterer(address common.Address, filterer bind.ContractFilterer) (*ECPTaskFilterer, error) {
	contract, err := bindECPTask(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ECPTaskFilterer{contract: contract}, nil
}

// bindECPTask binds a generic wrapper to an already deployed contract.
func bindECPTask(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ECPTaskMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ECPTask *ECPTaskRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ECPTask.Contract.ECPTaskCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ECPTask *ECPTaskRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ECPTask.Contract.ECPTaskTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ECPTask *ECPTaskRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ECPTask.Contract.ECPTaskTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ECPTask *ECPTaskCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ECPTask.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ECPTask *ECPTaskTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ECPTask.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ECPTask *ECPTaskTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ECPTask.Contract.contract.Transact(opts, method, params...)
}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_ECPTask *ECPTaskCaller) ChallengeTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "challengeTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_ECPTask *ECPTaskSession) ChallengeTx() (string, error) {
	return _ECPTask.Contract.ChallengeTx(&_ECPTask.CallOpts)
}

// ChallengeTx is a free data retrieval call binding the contract method 0xe4881688.
//
// Solidity: function challengeTx() view returns(string)
func (_ECPTask *ECPTaskCallerSession) ChallengeTx() (string, error) {
	return _ECPTask.Contract.ChallengeTx(&_ECPTask.CallOpts)
}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_ECPTask *ECPTaskCaller) CpContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "cpContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_ECPTask *ECPTaskSession) CpContractAddress() (common.Address, error) {
	return _ECPTask.Contract.CpContractAddress(&_ECPTask.CallOpts)
}

// CpContractAddress is a free data retrieval call binding the contract method 0x92395dc5.
//
// Solidity: function cpContractAddress() view returns(address)
func (_ECPTask *ECPTaskCallerSession) CpContractAddress() (common.Address, error) {
	return _ECPTask.Contract.CpContractAddress(&_ECPTask.CallOpts)
}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_ECPTask *ECPTaskCaller) Deadline(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "deadline")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_ECPTask *ECPTaskSession) Deadline() (*big.Int, error) {
	return _ECPTask.Contract.Deadline(&_ECPTask.CallOpts)
}

// Deadline is a free data retrieval call binding the contract method 0x29dcb0cf.
//
// Solidity: function deadline() view returns(uint256)
func (_ECPTask *ECPTaskCallerSession) Deadline() (*big.Int, error) {
	return _ECPTask.Contract.Deadline(&_ECPTask.CallOpts)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_ECPTask *ECPTaskCaller) GetTaskInfo(opts *bind.CallOpts) (ECPTaskTaskInfo, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "getTaskInfo")

	if err != nil {
		return *new(ECPTaskTaskInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ECPTaskTaskInfo)).(*ECPTaskTaskInfo)

	return out0, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_ECPTask *ECPTaskSession) GetTaskInfo() (ECPTaskTaskInfo, error) {
	return _ECPTask.Contract.GetTaskInfo(&_ECPTask.CallOpts)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0xbac64a2e.
//
// Solidity: function getTaskInfo() view returns((uint256,uint256,string,string,address,string,string,string,string,string,string,string,uint256,bool,bool))
func (_ECPTask *ECPTaskCallerSession) GetTaskInfo() (ECPTaskTaskInfo, error) {
	return _ECPTask.Contract.GetTaskInfo(&_ECPTask.CallOpts)
}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_ECPTask *ECPTaskCaller) InputParam(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "inputParam")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_ECPTask *ECPTaskSession) InputParam() (string, error) {
	return _ECPTask.Contract.InputParam(&_ECPTask.CallOpts)
}

// InputParam is a free data retrieval call binding the contract method 0xfe140e63.
//
// Solidity: function inputParam() view returns(string)
func (_ECPTask *ECPTaskCallerSession) InputParam() (string, error) {
	return _ECPTask.Contract.InputParam(&_ECPTask.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_ECPTask *ECPTaskCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_ECPTask *ECPTaskSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _ECPTask.Contract.IsAdmin(&_ECPTask.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_ECPTask *ECPTaskCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _ECPTask.Contract.IsAdmin(&_ECPTask.CallOpts, arg0)
}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_ECPTask *ECPTaskCaller) IsChallenged(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "isChallenged")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_ECPTask *ECPTaskSession) IsChallenged() (bool, error) {
	return _ECPTask.Contract.IsChallenged(&_ECPTask.CallOpts)
}

// IsChallenged is a free data retrieval call binding the contract method 0x9df4d0fe.
//
// Solidity: function isChallenged() view returns(bool)
func (_ECPTask *ECPTaskCallerSession) IsChallenged() (bool, error) {
	return _ECPTask.Contract.IsChallenged(&_ECPTask.CallOpts)
}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_ECPTask *ECPTaskCaller) IsSubmitted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "isSubmitted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_ECPTask *ECPTaskSession) IsSubmitted() (bool, error) {
	return _ECPTask.Contract.IsSubmitted(&_ECPTask.CallOpts)
}

// IsSubmitted is a free data retrieval call binding the contract method 0x741b8790.
//
// Solidity: function isSubmitted() view returns(bool)
func (_ECPTask *ECPTaskCallerSession) IsSubmitted() (bool, error) {
	return _ECPTask.Contract.IsSubmitted(&_ECPTask.CallOpts)
}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_ECPTask *ECPTaskCaller) LockFundTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "lockFundTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_ECPTask *ECPTaskSession) LockFundTx() (string, error) {
	return _ECPTask.Contract.LockFundTx(&_ECPTask.CallOpts)
}

// LockFundTx is a free data retrieval call binding the contract method 0xf80cb18a.
//
// Solidity: function lockFundTx() view returns(string)
func (_ECPTask *ECPTaskCallerSession) LockFundTx() (string, error) {
	return _ECPTask.Contract.LockFundTx(&_ECPTask.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ECPTask *ECPTaskCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ECPTask *ECPTaskSession) Owner() (common.Address, error) {
	return _ECPTask.Contract.Owner(&_ECPTask.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ECPTask *ECPTaskCallerSession) Owner() (common.Address, error) {
	return _ECPTask.Contract.Owner(&_ECPTask.CallOpts)
}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_ECPTask *ECPTaskCaller) Proof(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "proof")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_ECPTask *ECPTaskSession) Proof() (string, error) {
	return _ECPTask.Contract.Proof(&_ECPTask.CallOpts)
}

// Proof is a free data retrieval call binding the contract method 0xfaf924cf.
//
// Solidity: function proof() view returns(string)
func (_ECPTask *ECPTaskCallerSession) Proof() (string, error) {
	return _ECPTask.Contract.Proof(&_ECPTask.CallOpts)
}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_ECPTask *ECPTaskCaller) ResourceType(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "resourceType")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_ECPTask *ECPTaskSession) ResourceType() (*big.Int, error) {
	return _ECPTask.Contract.ResourceType(&_ECPTask.CallOpts)
}

// ResourceType is a free data retrieval call binding the contract method 0xf7d22190.
//
// Solidity: function resourceType() view returns(uint256)
func (_ECPTask *ECPTaskCallerSession) ResourceType() (*big.Int, error) {
	return _ECPTask.Contract.ResourceType(&_ECPTask.CallOpts)
}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_ECPTask *ECPTaskCaller) RewardTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "rewardTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_ECPTask *ECPTaskSession) RewardTx() (string, error) {
	return _ECPTask.Contract.RewardTx(&_ECPTask.CallOpts)
}

// RewardTx is a free data retrieval call binding the contract method 0x2cae8b10.
//
// Solidity: function rewardTx() view returns(string)
func (_ECPTask *ECPTaskCallerSession) RewardTx() (string, error) {
	return _ECPTask.Contract.RewardTx(&_ECPTask.CallOpts)
}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_ECPTask *ECPTaskCaller) SlashTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "slashTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_ECPTask *ECPTaskSession) SlashTx() (string, error) {
	return _ECPTask.Contract.SlashTx(&_ECPTask.CallOpts)
}

// SlashTx is a free data retrieval call binding the contract method 0x4dc17e58.
//
// Solidity: function slashTx() view returns(string)
func (_ECPTask *ECPTaskCallerSession) SlashTx() (string, error) {
	return _ECPTask.Contract.SlashTx(&_ECPTask.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_ECPTask *ECPTaskCaller) Status(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "status")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_ECPTask *ECPTaskSession) Status() (string, error) {
	return _ECPTask.Contract.Status(&_ECPTask.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x200d2ed2.
//
// Solidity: function status() view returns(string)
func (_ECPTask *ECPTaskCallerSession) Status() (string, error) {
	return _ECPTask.Contract.Status(&_ECPTask.CallOpts)
}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_ECPTask *ECPTaskCaller) TaskType(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "taskType")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_ECPTask *ECPTaskSession) TaskType() (*big.Int, error) {
	return _ECPTask.Contract.TaskType(&_ECPTask.CallOpts)
}

// TaskType is a free data retrieval call binding the contract method 0x8cf6f32c.
//
// Solidity: function taskType() view returns(uint256)
func (_ECPTask *ECPTaskCallerSession) TaskType() (*big.Int, error) {
	return _ECPTask.Contract.TaskType(&_ECPTask.CallOpts)
}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_ECPTask *ECPTaskCaller) UnlockFundTx(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "unlockFundTx")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_ECPTask *ECPTaskSession) UnlockFundTx() (string, error) {
	return _ECPTask.Contract.UnlockFundTx(&_ECPTask.CallOpts)
}

// UnlockFundTx is a free data retrieval call binding the contract method 0xec218dc4.
//
// Solidity: function unlockFundTx() view returns(string)
func (_ECPTask *ECPTaskCallerSession) UnlockFundTx() (string, error) {
	return _ECPTask.Contract.UnlockFundTx(&_ECPTask.CallOpts)
}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_ECPTask *ECPTaskCaller) VerifyParam(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "verifyParam")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_ECPTask *ECPTaskSession) VerifyParam() (string, error) {
	return _ECPTask.Contract.VerifyParam(&_ECPTask.CallOpts)
}

// VerifyParam is a free data retrieval call binding the contract method 0x497153e3.
//
// Solidity: function verifyParam() view returns(string)
func (_ECPTask *ECPTaskCallerSession) VerifyParam() (string, error) {
	return _ECPTask.Contract.VerifyParam(&_ECPTask.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_ECPTask *ECPTaskCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ECPTask.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_ECPTask *ECPTaskSession) Version() (string, error) {
	return _ECPTask.Contract.Version(&_ECPTask.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_ECPTask *ECPTaskCallerSession) Version() (string, error) {
	return _ECPTask.Contract.Version(&_ECPTask.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ECPTask *ECPTaskTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ECPTask *ECPTaskSession) RenounceOwnership() (*types.Transaction, error) {
	return _ECPTask.Contract.RenounceOwnership(&_ECPTask.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ECPTask *ECPTaskTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ECPTask.Contract.RenounceOwnership(&_ECPTask.TransactOpts)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_ECPTask *ECPTaskTransactor) SubmitProof(opts *bind.TransactOpts, _proof string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "submitProof", _proof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_ECPTask *ECPTaskSession) SubmitProof(_proof string) (*types.Transaction, error) {
	return _ECPTask.Contract.SubmitProof(&_ECPTask.TransactOpts, _proof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x2c2e8faf.
//
// Solidity: function submitProof(string _proof) returns()
func (_ECPTask *ECPTaskTransactorSession) SubmitProof(_proof string) (*types.Transaction, error) {
	return _ECPTask.Contract.SubmitProof(&_ECPTask.TransactOpts, _proof)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ECPTask *ECPTaskTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ECPTask *ECPTaskSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ECPTask.Contract.TransferOwnership(&_ECPTask.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ECPTask *ECPTaskTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ECPTask.Contract.TransferOwnership(&_ECPTask.TransactOpts, newOwner)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_ECPTask *ECPTaskTransactor) UpdateChallengeAndStatus(opts *bind.TransactOpts, _challengeTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "updateChallengeAndStatus", _challengeTx, _status)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_ECPTask *ECPTaskSession) UpdateChallengeAndStatus(_challengeTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateChallengeAndStatus(&_ECPTask.TransactOpts, _challengeTx, _status)
}

// UpdateChallengeAndStatus is a paid mutator transaction binding the contract method 0x6b24e930.
//
// Solidity: function updateChallengeAndStatus(string _challengeTx, string _status) returns()
func (_ECPTask *ECPTaskTransactorSession) UpdateChallengeAndStatus(_challengeTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateChallengeAndStatus(&_ECPTask.TransactOpts, _challengeTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_ECPTask *ECPTaskTransactor) UpdateLockAndStatus(opts *bind.TransactOpts, _lockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "updateLockAndStatus", _lockFundTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_ECPTask *ECPTaskSession) UpdateLockAndStatus(_lockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateLockAndStatus(&_ECPTask.TransactOpts, _lockFundTx, _status)
}

// UpdateLockAndStatus is a paid mutator transaction binding the contract method 0x4ad45b32.
//
// Solidity: function updateLockAndStatus(string _lockFundTx, string _status) returns()
func (_ECPTask *ECPTaskTransactorSession) UpdateLockAndStatus(_lockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateLockAndStatus(&_ECPTask.TransactOpts, _lockFundTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_ECPTask *ECPTaskTransactor) UpdateRewardAndStatus(opts *bind.TransactOpts, _rewardTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "updateRewardAndStatus", _rewardTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_ECPTask *ECPTaskSession) UpdateRewardAndStatus(_rewardTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateRewardAndStatus(&_ECPTask.TransactOpts, _rewardTx, _status)
}

// UpdateRewardAndStatus is a paid mutator transaction binding the contract method 0xb07d7f52.
//
// Solidity: function updateRewardAndStatus(string _rewardTx, string _status) returns()
func (_ECPTask *ECPTaskTransactorSession) UpdateRewardAndStatus(_rewardTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateRewardAndStatus(&_ECPTask.TransactOpts, _rewardTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_ECPTask *ECPTaskTransactor) UpdateSlashAndStatus(opts *bind.TransactOpts, _slashTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "updateSlashAndStatus", _slashTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_ECPTask *ECPTaskSession) UpdateSlashAndStatus(_slashTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateSlashAndStatus(&_ECPTask.TransactOpts, _slashTx, _status)
}

// UpdateSlashAndStatus is a paid mutator transaction binding the contract method 0x1382fe66.
//
// Solidity: function updateSlashAndStatus(string _slashTx, string _status) returns()
func (_ECPTask *ECPTaskTransactorSession) UpdateSlashAndStatus(_slashTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateSlashAndStatus(&_ECPTask.TransactOpts, _slashTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_ECPTask *ECPTaskTransactor) UpdateUnlockAndStatus(opts *bind.TransactOpts, _unlockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.contract.Transact(opts, "updateUnlockAndStatus", _unlockFundTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_ECPTask *ECPTaskSession) UpdateUnlockAndStatus(_unlockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateUnlockAndStatus(&_ECPTask.TransactOpts, _unlockFundTx, _status)
}

// UpdateUnlockAndStatus is a paid mutator transaction binding the contract method 0xb0a40371.
//
// Solidity: function updateUnlockAndStatus(string _unlockFundTx, string _status) returns()
func (_ECPTask *ECPTaskTransactorSession) UpdateUnlockAndStatus(_unlockFundTx string, _status string) (*types.Transaction, error) {
	return _ECPTask.Contract.UpdateUnlockAndStatus(&_ECPTask.TransactOpts, _unlockFundTx, _status)
}

// ECPTaskChallengeAndStatusUpdatedIterator is returned from FilterChallengeAndStatusUpdated and is used to iterate over the raw logs and unpacked data for ChallengeAndStatusUpdated events raised by the ECPTask contract.
type ECPTaskChallengeAndStatusUpdatedIterator struct {
	Event *ECPTaskChallengeAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskChallengeAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskChallengeAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskChallengeAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskChallengeAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskChallengeAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskChallengeAndStatusUpdated represents a ChallengeAndStatusUpdated event raised by the ECPTask contract.
type ECPTaskChallengeAndStatusUpdated struct {
	ChallengeTx string
	Status      string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeAndStatusUpdated is a free log retrieval operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_ECPTask *ECPTaskFilterer) FilterChallengeAndStatusUpdated(opts *bind.FilterOpts) (*ECPTaskChallengeAndStatusUpdatedIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "ChallengeAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ECPTaskChallengeAndStatusUpdatedIterator{contract: _ECPTask.contract, event: "ChallengeAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchChallengeAndStatusUpdated is a free log subscription operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_ECPTask *ECPTaskFilterer) WatchChallengeAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *ECPTaskChallengeAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "ChallengeAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskChallengeAndStatusUpdated)
				if err := _ECPTask.contract.UnpackLog(event, "ChallengeAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeAndStatusUpdated is a log parse operation binding the contract event 0x37f72c359298bc403d455d28c855dab034a805c621c8939e09413242c83d05f5.
//
// Solidity: event ChallengeAndStatusUpdated(string challengeTx, string status)
func (_ECPTask *ECPTaskFilterer) ParseChallengeAndStatusUpdated(log types.Log) (*ECPTaskChallengeAndStatusUpdated, error) {
	event := new(ECPTaskChallengeAndStatusUpdated)
	if err := _ECPTask.contract.UnpackLog(event, "ChallengeAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskLockAndStatusUpdatedIterator is returned from FilterLockAndStatusUpdated and is used to iterate over the raw logs and unpacked data for LockAndStatusUpdated events raised by the ECPTask contract.
type ECPTaskLockAndStatusUpdatedIterator struct {
	Event *ECPTaskLockAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskLockAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskLockAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskLockAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskLockAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskLockAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskLockAndStatusUpdated represents a LockAndStatusUpdated event raised by the ECPTask contract.
type ECPTaskLockAndStatusUpdated struct {
	LockFundTx string
	Status     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLockAndStatusUpdated is a free log retrieval operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) FilterLockAndStatusUpdated(opts *bind.FilterOpts) (*ECPTaskLockAndStatusUpdatedIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "LockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ECPTaskLockAndStatusUpdatedIterator{contract: _ECPTask.contract, event: "LockAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchLockAndStatusUpdated is a free log subscription operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) WatchLockAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *ECPTaskLockAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "LockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskLockAndStatusUpdated)
				if err := _ECPTask.contract.UnpackLog(event, "LockAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockAndStatusUpdated is a log parse operation binding the contract event 0xeb08b71e81c5e995ac5fbef09b6c1380b2f9113fda277a04d2fcc2a6c5bd47c2.
//
// Solidity: event LockAndStatusUpdated(string lockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) ParseLockAndStatusUpdated(log types.Log) (*ECPTaskLockAndStatusUpdated, error) {
	event := new(ECPTaskLockAndStatusUpdated)
	if err := _ECPTask.contract.UnpackLog(event, "LockAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ECPTask contract.
type ECPTaskOwnershipTransferredIterator struct {
	Event *ECPTaskOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskOwnershipTransferred represents a OwnershipTransferred event raised by the ECPTask contract.
type ECPTaskOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ECPTask *ECPTaskFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ECPTaskOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ECPTaskOwnershipTransferredIterator{contract: _ECPTask.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ECPTask *ECPTaskFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ECPTaskOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskOwnershipTransferred)
				if err := _ECPTask.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ECPTask *ECPTaskFilterer) ParseOwnershipTransferred(log types.Log) (*ECPTaskOwnershipTransferred, error) {
	event := new(ECPTaskOwnershipTransferred)
	if err := _ECPTask.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskRewardAndStatusUpdatedIterator is returned from FilterRewardAndStatusUpdated and is used to iterate over the raw logs and unpacked data for RewardAndStatusUpdated events raised by the ECPTask contract.
type ECPTaskRewardAndStatusUpdatedIterator struct {
	Event *ECPTaskRewardAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskRewardAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskRewardAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskRewardAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskRewardAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskRewardAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskRewardAndStatusUpdated represents a RewardAndStatusUpdated event raised by the ECPTask contract.
type ECPTaskRewardAndStatusUpdated struct {
	RewardTx string
	Status   string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRewardAndStatusUpdated is a free log retrieval operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_ECPTask *ECPTaskFilterer) FilterRewardAndStatusUpdated(opts *bind.FilterOpts) (*ECPTaskRewardAndStatusUpdatedIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "RewardAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ECPTaskRewardAndStatusUpdatedIterator{contract: _ECPTask.contract, event: "RewardAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardAndStatusUpdated is a free log subscription operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_ECPTask *ECPTaskFilterer) WatchRewardAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *ECPTaskRewardAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "RewardAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskRewardAndStatusUpdated)
				if err := _ECPTask.contract.UnpackLog(event, "RewardAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAndStatusUpdated is a log parse operation binding the contract event 0x6cefc22ea80cdbcb2e0b5b0b9b136056e885d5a55058ec6f69e67395909b9f1f.
//
// Solidity: event RewardAndStatusUpdated(string rewardTx, string status)
func (_ECPTask *ECPTaskFilterer) ParseRewardAndStatusUpdated(log types.Log) (*ECPTaskRewardAndStatusUpdated, error) {
	event := new(ECPTaskRewardAndStatusUpdated)
	if err := _ECPTask.contract.UnpackLog(event, "RewardAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskSlashAndStatusUpdatedIterator is returned from FilterSlashAndStatusUpdated and is used to iterate over the raw logs and unpacked data for SlashAndStatusUpdated events raised by the ECPTask contract.
type ECPTaskSlashAndStatusUpdatedIterator struct {
	Event *ECPTaskSlashAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskSlashAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskSlashAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskSlashAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskSlashAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskSlashAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskSlashAndStatusUpdated represents a SlashAndStatusUpdated event raised by the ECPTask contract.
type ECPTaskSlashAndStatusUpdated struct {
	SlashTx string
	Status  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSlashAndStatusUpdated is a free log retrieval operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_ECPTask *ECPTaskFilterer) FilterSlashAndStatusUpdated(opts *bind.FilterOpts) (*ECPTaskSlashAndStatusUpdatedIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "SlashAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ECPTaskSlashAndStatusUpdatedIterator{contract: _ECPTask.contract, event: "SlashAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchSlashAndStatusUpdated is a free log subscription operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_ECPTask *ECPTaskFilterer) WatchSlashAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *ECPTaskSlashAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "SlashAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskSlashAndStatusUpdated)
				if err := _ECPTask.contract.UnpackLog(event, "SlashAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashAndStatusUpdated is a log parse operation binding the contract event 0x14991a7b105e113ae4508a09d769814db62890b0952651f33852175fe4b11d5f.
//
// Solidity: event SlashAndStatusUpdated(string slashTx, string status)
func (_ECPTask *ECPTaskFilterer) ParseSlashAndStatusUpdated(log types.Log) (*ECPTaskSlashAndStatusUpdated, error) {
	event := new(ECPTaskSlashAndStatusUpdated)
	if err := _ECPTask.contract.UnpackLog(event, "SlashAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskSubmitProofIterator is returned from FilterSubmitProof and is used to iterate over the raw logs and unpacked data for SubmitProof events raised by the ECPTask contract.
type ECPTaskSubmitProofIterator struct {
	Event *ECPTaskSubmitProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskSubmitProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskSubmitProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskSubmitProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskSubmitProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskSubmitProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskSubmitProof represents a SubmitProof event raised by the ECPTask contract.
type ECPTaskSubmitProof struct {
	Proof string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterSubmitProof is a free log retrieval operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_ECPTask *ECPTaskFilterer) FilterSubmitProof(opts *bind.FilterOpts) (*ECPTaskSubmitProofIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "SubmitProof")
	if err != nil {
		return nil, err
	}
	return &ECPTaskSubmitProofIterator{contract: _ECPTask.contract, event: "SubmitProof", logs: logs, sub: sub}, nil
}

// WatchSubmitProof is a free log subscription operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_ECPTask *ECPTaskFilterer) WatchSubmitProof(opts *bind.WatchOpts, sink chan<- *ECPTaskSubmitProof) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "SubmitProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskSubmitProof)
				if err := _ECPTask.contract.UnpackLog(event, "SubmitProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitProof is a log parse operation binding the contract event 0x67e0a5f59c15b94ec89ed4c7e56f5b15fdaca75d0b86d75b2018706a2280154f.
//
// Solidity: event SubmitProof(string proof)
func (_ECPTask *ECPTaskFilterer) ParseSubmitProof(log types.Log) (*ECPTaskSubmitProof, error) {
	event := new(ECPTaskSubmitProof)
	if err := _ECPTask.contract.UnpackLog(event, "SubmitProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ECPTaskUnlockAndStatusUpdatedIterator is returned from FilterUnlockAndStatusUpdated and is used to iterate over the raw logs and unpacked data for UnlockAndStatusUpdated events raised by the ECPTask contract.
type ECPTaskUnlockAndStatusUpdatedIterator struct {
	Event *ECPTaskUnlockAndStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ECPTaskUnlockAndStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ECPTaskUnlockAndStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ECPTaskUnlockAndStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ECPTaskUnlockAndStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ECPTaskUnlockAndStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ECPTaskUnlockAndStatusUpdated represents a UnlockAndStatusUpdated event raised by the ECPTask contract.
type ECPTaskUnlockAndStatusUpdated struct {
	UnlockFundTx string
	Status       string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnlockAndStatusUpdated is a free log retrieval operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) FilterUnlockAndStatusUpdated(opts *bind.FilterOpts) (*ECPTaskUnlockAndStatusUpdatedIterator, error) {

	logs, sub, err := _ECPTask.contract.FilterLogs(opts, "UnlockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ECPTaskUnlockAndStatusUpdatedIterator{contract: _ECPTask.contract, event: "UnlockAndStatusUpdated", logs: logs, sub: sub}, nil
}

// WatchUnlockAndStatusUpdated is a free log subscription operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) WatchUnlockAndStatusUpdated(opts *bind.WatchOpts, sink chan<- *ECPTaskUnlockAndStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _ECPTask.contract.WatchLogs(opts, "UnlockAndStatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ECPTaskUnlockAndStatusUpdated)
				if err := _ECPTask.contract.UnpackLog(event, "UnlockAndStatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockAndStatusUpdated is a log parse operation binding the contract event 0xa2c323da9675ecdcddb6410b223f7da6a9ea2e8df0f0cea69766f2562691d2fa.
//
// Solidity: event UnlockAndStatusUpdated(string unlockFundTx, string status)
func (_ECPTask *ECPTaskFilterer) ParseUnlockAndStatusUpdated(log types.Log) (*ECPTaskUnlockAndStatusUpdated, error) {
	event := new(ECPTaskUnlockAndStatusUpdated)
	if err := _ECPTask.contract.UnpackLog(event, "UnlockAndStatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
